<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width.State1="150" height.State1="108">
	<fx:Script>
		<![CDATA[
			//imports classes and libraries need for component
			import com.adobe.serialization.json.JSON;
			
			import flash.events.GestureEvent;
			import flash.events.PressAndTapGestureEvent;
			import flash.events.TouchEvent;
			import flash.events.TransformGestureEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			
			import spark.components.List;
			import spark.events.RendererExistenceEvent;
			import spark.layouts.supportClasses.DropLocation;
			
			/*Variables need for functions within component*/
			[Bindable]
			public var trashDB:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var dp:ArrayCollection;
			
			private function addTouchTap(event:RendererExistenceEvent):void{
				//event.renderer.addEventListener(MouseEvent.MOUSE_DOWN, readdItem);
				if(Multitouch.supportsGestureEvents){
					event.renderer.addEventListener(PressAndTapGestureEvent.GESTURE_PRESS_AND_TAP, readdItem); 
				}
			}
			
			//function to re-add members on which a user performs a press and tap gesture
			private function readdItem(e:PressAndTapGestureEvent):void{//:MouseEvent):void{
				//retrieves the object of which user is selecting
				var obj:ObjectProxy = e.currentTarget.data;
				//verifies it is not null
				if (obj != null){
					var objects:Object = new Object();
					var oldList:String = new String();
					var dropIndex:int = new int();
					//if the object came from series, re-add it
					if (obj.listLocation == "COLUMNS"){
						oldList = obj.newList;
						objects[0] = obj;
						objects.length = 1;
						
						//removes item from trash list
						FlexGlobals.topLevelApplication.removeFromList(obj, oldList);
						obj.number = 0;
						
						//re-adds item to end of series list
						dropIndex = FlexGlobals.topLevelApplication.series.serDB.length;
						FlexGlobals.topLevelApplication.series.serDB.addItemAt(obj, dropIndex);
						FlexGlobals.topLevelApplication.moveToColumns(objects);
					}
					//if the object came from categories, re-add it
					else if (obj.listLocation =="ROWS"){
						oldList = obj.newList;
						objects[0] = obj;
						objects.length = 1;
						
						//removes item from trash list
						FlexGlobals.topLevelApplication.removeFromList(obj, oldList);
						obj.number = 0;
						
						//re-adds item to end of categories list
						dropIndex = FlexGlobals.topLevelApplication.categories.catDB.length;
						FlexGlobals.topLevelApplication.categories.catDB.addItemAt(obj, dropIndex);
						FlexGlobals.topLevelApplication.moveToRows(objects);
					}
				}
			}
			
			//event handler for entering a drag motion
			protected function trashList_dragEnterHandler(event:DragEvent):void
			{
				event.preventDefault();
				var myDragTarget:List=event.currentTarget as List;
				DragManager.acceptDragDrop(myDragTarget);
			}
			
			//handles when a user drags an object over a list
			protected function trashList_dragOverHandler(event:DragEvent):void
			{
				var myDropTarget:List=List(event.currentTarget);
				var pos:DropLocation=this.trashList.layout.calculateDropLocation(event);
				DragManager.showFeedback(DragManager.COPY);

			}
			
			//handles a drop into a dropable list
			protected function trashList_dragDropHandler(event:DragEvent):void
			{
				var items:Object=event.dragSource.dataForFormat("itemsByIndex") as Object;
				var myDropTarget:List=List(event.currentTarget);
				var pos:DropLocation;
				var oldList:String = new String();
				myDropTarget.dataProvider = trashDB;
				//if there are items in the trash can append new items to drop index
				if (myDropTarget.dataProvider.length != 0){
					for (var k:int = 0; k < items.length; k++){
						oldList = items[k].listLocation;
						items[k].newList = 'TRASH';
						FlexGlobals.topLevelApplication.removeFromList(items[k], oldList);
						for (var j:int=0; j<myDropTarget.dataProvider.length; j++){
							if (myDropTarget.dataProvider[j].value != items[k].value){
								pos=this.trashList.layout.calculateDropLocation(event);
								for (var i:int=items.length - 1; i >= 0; i--)
								{
									this.trashDB.addItemAt(items[i], pos.dropIndex);
								}
							}
						}
					}
				}
				//if trash can is empty place new item in the front
				else{
					pos=this.trashList.layout.calculateDropLocation(event);
					for (var p:int=items.length - 1; p >= 0; p--)
					{
						oldList = items[p].listLocation;
						items[k].newList = 'TRASH';
						this.trashDB.addItemAt(items[p], pos.dropIndex);
						FlexGlobals.topLevelApplication.removeFromList(items[p], oldList);
					}
				}
			}
			
			//closes the trash can by changing the state to 1 (plays transition)
			public function Trash_Close():void{
				currentState = "State1";
				this.addEventListener(MouseEvent.MOUSE_DOWN, FlexGlobals.topLevelApplication.Trash_Open);
			}
			
		]]>
		
		
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:states>
		<s:State name="State1"/>
		<s:State name="State2"/>
	</s:states>
	<fx:DesignLayer>
		<s:SkinnableContainer id="trash" height.State1="108" width.State1="150" height.State2="400" width.State2="400" x.State2="-750" y.State2="-470"  skinClass="skins.PanelCorner" />
		<s:RichText color="#eeeeee" fontFamily="Lucida Grande" fontSize="18" id="TrashLabel" tabStops="S0 S50 S100" text="Trash Can" x="-598" y="-450" includeIn="State2"/>
		<s:BitmapImage id="trashIcon"
					   source="@Embed('assets/trash.png')"
					   fillMode="clip"
					   horizontalCenter="0"
					   verticalCenter="0"
					   includeIn="State1"
					   />
		<s:Button includeIn="State2" x='-440' y='-460' id="closeTrash" label="Close X" click.State2="Trash_Close()" height="30" ></s:Button>
	</fx:DesignLayer>
	<s:List id="trashList"
			width="130" height="90" x="5" y="5"
			width.State2="300"
			height.State2="300"
			x.State2="-700" y.State2="-420"
			alpha="0.8" alpha.State1="0"
			rendererAdd="addTouchTap(event)"
			dataProvider = "{trashDB}"
			dragEnter="trashList_dragEnterHandler(event)"
			dragOver="trashList_dragOverHandler(event)"
			dragDrop="trashList_dragDropHandler(event)"
			skinClass="skins.MyDropSkin"
			itemRenderer="itemRenderers.trashItemRenderer" width.State1="150" height.State1="109" x.State1="0" y.State1="0">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center"
								paddingLeft="0"
								paddingTop="10" paddingBottom="10"/>
		</s:layout>
		
	</s:List>
	<s:transitions>
		<s:Transition autoReverse="true" fromState="State1" toState="State2">
			<s:Parallel>
				<s:Parallel target="{trash}">
					<s:Move autoCenterTransform="true" duration="1000" startDelay="500"/>
					<s:Resize duration="1000" startDelay="600"/>
				</s:Parallel>
				<s:Parallel target="{TrashLabel}">
					<s:Fade duration="500" startDelay="1600"/>
				</s:Parallel>
				<s:Parallel target="{closeTrash}">
					<s:Fade duration="500" startDelay="1600"/>
				</s:Parallel>
				<s:Parallel target="{trashList}">
					<s:Move autoCenterTransform="true" duration="1000" startDelay="500"/>
					<s:Resize duration="1000" startDelay="600"/>
					<s:Fade duration='500' startDelay="1600" />
				</s:Parallel>
				<s:Parallel target="{trashIcon}">
					<s:Fade duration="500" startDelay="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="State2" toState="State1">
			<s:Parallel>	
				<s:Parallel target="{trash}">
					<s:Move autoCenterTransform="true" duration="800" startDelay="300"/>
					<s:Resize duration="800" startDelay="300"/>
				</s:Parallel>
				<s:Parallel target="{TrashLabel}">
					<s:Fade duration="300" startDelay="0"/>
				</s:Parallel>
				<s:Parallel target="{closeTrash}">
					<s:Fade duration="300" startDelay="0"/>
				</s:Parallel>
				<s:Parallel target="{trashList}">
					<s:Move autoCenterTransform="true" duration="800" startDelay="300"/>
					<s:Resize duration="800" startDelay="300"/>
					<s:Fade duration='300' startDelay="0" />
					<s:Parallel target="{trashIcon}">
						<s:Fade duration="500" startDelay="1100"/>
					</s:Parallel>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
	</s:transitions>
</s:Group>
