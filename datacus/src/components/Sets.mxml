<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="Sets_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import flash.events.GestureEvent;
			import flash.events.PressAndTapGestureEvent;
			import flash.events.TouchEvent;
			import flash.events.TransformGestureEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			
			import spark.components.List;
			import spark.events.RendererExistenceEvent;
			import spark.layouts.supportClasses.DropLocation;
			

			
			/*Variables need for functions within component*/
			[Bindable]
			private var setsDB:ArrayCollection=new ArrayCollection();
			
			//Sets currentStateS
			protected function Sets_creationCompleteHandler(event:FlexEvent):void{
				currentState = 'Sets1';
			}
			
			//Adds the PressAndTapGesture to each rendered item in the list and makes this event trigger a load set
			private function addTouchTap(event:RendererExistenceEvent):void{
				if(Multitouch.supportsGestureEvents){
					event.renderer.addEventListener(MouseEvent.DOUBLE_CLICK, LoadOldSet); 
				}
			}
			
			//Retrieves a list of active sets to be displayed in the Active Sets Menu
			public function retrieveActiveSets():void{
				FlexGlobals.topLevelApplication.retrieveSets.url = FlexGlobals.topLevelApplication.serverIDJSON;
				FlexGlobals.topLevelApplication.retrieveSets.send()
			}
			
			//Populates the sets list within the Active Sets Menu
			public function getSets(event:ResultEvent):void{
				//takes in json from returned event and stores in an array for parsing
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				var tempSetsAC:ArrayCollection = new ArrayCollection();
				
				//adds each element of the array into the array collection
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					obj.label = arr[i];
					obj.number = i;
					obj.value = arr[i];
					var objProx:ObjectProxy = new ObjectProxy(obj);
					tempSetsAC.addItem(objProx);	
					
				}
				//sets the array collection to be displayed within the list
				setsList.dataProvider = tempSetsAC;
				
			}
			
			//Closes the sets menu with transition and adds a listener for it to be clicked again to be reopened
			public function Sets_Close():void{
				currentState='Sets1';
				this.addEventListener(MouseEvent.MOUSE_DOWN, FlexGlobals.topLevelApplication.Sets_Open);
			}
			
			//Clears categories and series panels as well as loads a previous graph
			public function LoadOldSet(e:MouseEvent):void{
				var obj:ObjectProxy = e.currentTarget.data;
				if (obj != null){
					//resets all global lists
					FlexGlobals.topLevelApplication.series.serDB = new ArrayCollection;
					FlexGlobals.topLevelApplication.categories.catDB = new ArrayCollection;	
					FlexGlobals.topLevelApplication.trash.trashDB = new ArrayCollection;
					FlexGlobals.topLevelApplication.seriesList = new ArrayCollection;
					FlexGlobals.topLevelApplication.categoriesList = new ArrayCollection;
					
					//sets current query name to selected value
					FlexGlobals.topLevelApplication.currentQueryName = obj.value;
					//returns a graph of the new current query
					FlexGlobals.topLevelApplication.viewResults();
				}
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>	
	<s:states>
		<s:State name="Sets1"/>
		<s:State name="Sets2"/>
	</s:states>
	<fx:DesignLayer>
		<s:SkinnableContainer id="setsContainer" height.Sets1="100" width.Sets1="140" x.Sets1="0" y.Sets1="0" height.Sets2="400" width.Sets2="400" x.Sets2="520" y.Sets2="-550"  skinClass="skins.Panel" />
		<s:RichText color="#2B4381" fontFamily="Arial" fontSize="20" id="SetsLabel" tabStops="S0 S50 S100" text="Active Sets" x="665" y="-530" includeIn="Sets2"/>
		<s:RichText color="#2B4381" fontFamily="Arial" fontSize="20" id="SetsButtonLabel" tabStops="S0 S50 S100" text="Sets" x="50" y="40" includeIn="Sets1"/>
		<s:BitmapImage id="setsImg"
					   source="@Embed('assets/save.png')"
					   fillMode="clip"
					   left="30" right="0"  top="10" bottom="0"
					   height="60"
					   width="60"
					   includeIn="Sets1"
					   alpha="0.2"
					   />
		<s:Button includeIn="Sets2" x="830" y="-540" id="closeSets" label="Close X" click="Sets_Close()" height="30"></s:Button>
	</fx:DesignLayer>
	<s:List id="setsList" width="130" height="90" x="5" y="5" 
			width.Sets2="300"
			height.Sets2="300"
			x.Sets2="570" y.Sets2="-500"
			alpha="0.8" alpha.Sets1="0"
			dataProvider="{setsDB}"
			rendererAdd="addTouchTap(event)"
			skinClass="skins.MyDropSkin" doubleClickEnabled="true"
			itemRenderer="itemRenderers.SetItemRenderer">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center"
							  paddingTop="10" paddingBottom="10"/>
		</s:layout>
	</s:List>
	<s:transitions>
		<s:Transition autoReverse="true" fromState="Sets1" toState="Sets2">
			<s:Parallel>
				<s:Parallel target="{setsContainer}">
					<s:Move autoCenterTransform="true" duration="1000" startDelay="600"/>
					<s:Resize duration="900" startDelay="600"/>
				</s:Parallel>
				<s:Parallel target="{SetsLabel}">
					<s:Fade duration="500" startDelay="1600"/>
				</s:Parallel>
				<s:Parallel target="{closeSets}">
					<s:Fade duration="500" startDelay="1600"/>
				</s:Parallel>
				<s:Parallel target="{setsList}">
					<s:Fade duration="500" startDelay="1600"/>
					<s:Move autoCenterTransform="true" duration="1000" startDelay="600"/>
					<s:Resize duration="900" startDelay="600"/>
				</s:Parallel>
				<s:Parallel target="{SetsButtonLabel}">
					<s:Fade duration="500" startDelay="0"/>
				</s:Parallel>
				<s:Parallel target="{setsImg}">
					<s:Fade duration="500" startDelay="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Sets2" toState="Sets1">
			<s:Parallel>	
				<s:Parallel target="{setsContainer}">
					<s:Move autoCenterTransform="true" duration="1100" startDelay="800"/>
					<s:Resize duration="900" startDelay="600"/>
				</s:Parallel>
				<s:Parallel target="{SetsLabel}">
					<s:Fade duration="500" startDelay="0"/>
				</s:Parallel>
				<s:Parallel target="{closeSets}">
					<s:Fade duration="500" startDelay="0"/>
				</s:Parallel>
				<s:Parallel target="{setsList}">
					<s:Fade duration="500" startDelay="0"/>
					<s:Move autoCenterTransform="true" duration="1100" startDelay="800"/>
					<s:Resize duration="900" startDelay="600"/>
				</s:Parallel>
				<s:Parallel target="{SetsButtonLabel}">
					<s:Fade duration="500" startDelay="1600"/>
				</s:Parallel>
				<s:Parallel target="{setsImg}">
					<s:Fade duration="500" startDelay="1700"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
	</s:transitions>

</s:Group>
