<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			
			import spark.events.RendererExistenceEvent;
			
			//adds a click event handler to each item added to the Dimensions list
			private function addClick(event:RendererExistenceEvent):void{
				event.renderer.addEventListener(flash.events.MouseEvent.CLICK, SelectDimension);
			}
			
			//handles a click event on a member of the dimensions list
			private function SelectDimension(e:Event):void{
				var currentDimension:String = FlexGlobals.topLevelApplication.currentDimension;
				var newDimension:String = this.dimensionsList.selectedItems[0].label; 
				currentDimension = newDimension;
				
				FlexGlobals.topLevelApplication.picker.createLevels(currentDimension, currentDimension);
				//FlexGlobals.topLevelApplication.createLevels(currentDimension, currentDimension);
			}
			
			//Populates the dimension list
			public function getDimensions(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				FlexGlobals.topLevelApplication.dimensionsAC = new ArrayCollection();
				FlexGlobals.topLevelApplication.measuresAC = new ArrayCollection();
				var tempDimensionsAC:ArrayCollection = FlexGlobals.topLevelApplication.dimensionsAC;
				var tempMeasuresAC:ArrayCollection = FlexGlobals.topLevelApplication.measuresAC;
				var tempQueryName:String = FlexGlobals.topLevelApplication.currentQueryName;
				var tempServerID:String = FlexGlobals.topLevelApplication.serverIDJSON;
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					if(arr[i].caption == 'Measures'){
						obj.label = arr[i].caption;
						obj.value = arr[i].uniqueName;
						tempMeasuresAC.addItem(obj);
					}
					else{
						obj.label = arr[i].caption;
						obj.value = arr[i].uniqueName;
						var objProx:ObjectProxy = new ObjectProxy(obj);
						tempDimensionsAC.addItem(objProx);
					}
				}
				dimensionsList.dataProvider = tempDimensionsAC;
				if (arr.length != 0){
					var dimension:String = tempDimensionsAC[0].label;
					var hierarchy:String = tempDimensionsAC[0].label;
					FlexGlobals.topLevelApplication.callMeasures.url= tempServerID+tempQueryName+"/axis/UNUSED/dimension/Measures/hierarchy/Measures/MeasuresLevel";
					FlexGlobals.topLevelApplication.callMeasures.send();
					FlexGlobals.topLevelApplication.currentDimension = dimension;
					FlexGlobals.topLevelApplication.currentHierarchy = hierarchy;
					FlexGlobals.topLevelApplication.picker.createLevels(FlexGlobals.topLevelApplication.currentDimension, FlexGlobals.topLevelApplication.currentHierarchy);
				}
			}
			
		]]>
	</fx:Script>	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:DesignLayer id="DDLCBackground">
		<s:Rect height="60" id="DimensionsDLContainer" width="900" x="0" y="0">
		</s:Rect>
	</fx:DesignLayer>
	<s:List id="dimensionsList"
			width="890"
			height="50"
			dragEnabled="false"
			
			allowMultipleSelection="true"
			x="5" y="5"
			rendererAdd="addClick(event)"
			skinClass="skins.MyDropSkin" >
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" horizontalAlign="center"
								paddingLeft="5" paddingRight="5"
								paddingTop="0"/>
		</s:layout>
		
		<s:itemRenderer>
			<fx:Component>
				<s:ItemRenderer>
					<s:Group>
						<s:layout>
							<s:HorizontalLayout verticalAlign="middle"/>
						</s:layout>
						<s:BorderContainer  height="25" width="100%" cornerRadius="4" borderWeight="2"  >
							<s:backgroundFill>
								<s:LinearGradient rotation="90">
									<s:GradientEntry color="#81cca1" alpha=".5" />
									<s:GradientEntry color="#158c1b" alpha=".5" />
								</s:LinearGradient>
								
							</s:backgroundFill>
							
							<s:Label text="{data.label}" width="100%" height="100%" textAlign="center" fontSize="12" verticalAlign="middle"/>
						</s:BorderContainer>
					</s:Group>
				</s:ItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
</s:Group>
