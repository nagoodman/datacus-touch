<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			//imports classes and libraries need for component
			import com.adobe.serialization.json.JSON;
			
			import flash.events.TouchEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			
			import spark.components.List;
			import spark.events.RendererExistenceEvent;
			import spark.layouts.supportClasses.DropLocation;
			
			/*Variables need for functions within component*/
			[Bindable]
			public var catDB:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			public var dp:ArrayCollection;
			
			//Simulates a flick by following where the item is dragged... if not onto new list or same list then removes
			protected function catList_dragCompleteHandler(event:DragEvent):void
			{
				if (event.action == "none"){
					removeItem(event);
				}
			}
			
			//Removes an item from the categories panel
			private function removeItem(e:DragEvent):void{//TouchEvent):void{
				var obj:ObjectProxy = e.currentTarget.selectedItems[0];
				FlexGlobals.topLevelApplication.moveToUnused(obj);
			}
			
			//event handler for entering a drag motion
			protected function catList_dragEnterHandler(event:DragEvent):void
			{
				event.preventDefault();
				var myDragTarget:List=event.currentTarget as List;
				DragManager.acceptDragDrop(myDragTarget);
				
			}
			
			//handles when a user drags an object over a list
			protected function catList_dragOverHandler(event:DragEvent):void
			{
				var myDropTarget:List=List(event.currentTarget);
				var pos:DropLocation=this.catList.layout.calculateDropLocation(event);
				DragManager.showFeedback(DragManager.COPY);
			}
			[bindable]
			public var listLengthPriorAdd:int = new int();
			//handles a drop into a dropable list
			protected function catList_dragDropHandler(event:DragEvent):void
			{
				var items:Object=event.dragSource.dataForFormat("itemsByIndex") as Object;
				var myDropTarget:List=List(event.currentTarget);
				var pos:DropLocation;
				var oldList:String = new String();
				if (myDropTarget.dataProvider.length != 0){
					for (var k:int = 0; k < items.length; k++){
						for (var r:int = 0; r < myDropTarget.dataProvider.length; r++){
							if(myDropTarget.dataProvider[r].value == items[k].value){
								return;
							}
							if(items[k].selectionType == 'MEMBER' && myDropTarget.dataProvider[r].selectionType == 'LEVEL'){
								if(myDropTarget.dataProvider[r].value == items[k].level){
									return;
								}
							}
							if(items[k].selectionType == 'LEVEL' && myDropTarget.dataProvider[r].selectionType == 'MEMBER'){
								if(myDropTarget.dataProvider[r].level == items[k].value){
									return;
								}
							}
						}
						if(myDropTarget.dataProvider[0].dimension != items[k].dimension){
							return;
						}else{
							oldList = items[k].listLocation;
							FlexGlobals.topLevelApplication.removeFromList(items[k], oldList);
							var listLength:int = myDropTarget.dataProvider.length
							if (items[k].listLocation == 'ROWS'){
								pos=this.catList.layout.calculateDropLocation(event);
								items[k].number = pos.dropIndex;
								FlexGlobals.topLevelApplication.moveToRows(items);
								for (var x:int=items.length - 1; x >= 0; x--)
								{
									this.catDB.addItemAt(items[x], pos.dropIndex);
									listLengthPriorAdd++;
								}
								
							}
							else{
								while (listLengthPriorAdd<listLength){
									if (myDropTarget.dataProvider[listLengthPriorAdd].value != items[k].value){
										pos=this.catList.layout.calculateDropLocation(event);
										items[k].number = pos.dropIndex;
										FlexGlobals.topLevelApplication.moveToRows(items);
										for (var i:int=items.length - 1; i >= 0; i--)
										{
											this.catDB.addItemAt(items[i], pos.dropIndex);
											listLengthPriorAdd++;
										}
										
									}
								}
							}
						}
					}
				}else{
					pos=this.catList.layout.calculateDropLocation(event);
					listLengthPriorAdd = 0;
					var tempSerList:ArrayCollection = FlexGlobals.topLevelApplication.seriesList;
					if (tempSerList.length > 0){
						if(tempSerList[0].dimension == items[p].dimension){
							FlexGlobals.topLevelApplication.error_window("You cannot graph two items of the same dimension on different axes."
								+" Please make your selection again.");
							return;
						}
					}
					for (var p:int=items.length - 1; p >= 0; p--)
					{
						oldList = items[p].listLocation;
						FlexGlobals.topLevelApplication.removeFromList(items[p], oldList);
						items[p].number = 0;
						this.catDB.addItemAt(items[p], pos.dropIndex);
					}
					FlexGlobals.topLevelApplication.moveToRows(items);
					
				}
			}		

			

		]]>
		
		
	</fx:Script>
	<fx:Style source="../skins/style.css" />
	<fx:Declarations>

	</fx:Declarations>
	<fx:DesignLayer>
		<s:SkinnableContainer height="100" width="1080" skinClass="skins.Panel" />
		<s:RichText color="#2B4381" fontFamily="Arial" fontSize="20" id="CategoriesLabel" tabStops="S0 S50 S100" text="Categories" x="500" y="79"/>
		<s:BitmapImage id="img"
					   source="@Embed('assets/categories_bg.png')"
					   fillMode="repeat"
					   left="0" right="0"  top="0" bottom="0"/>
	</fx:DesignLayer>	
	<s:List id="catList"
			width="1070"
			height="70"
			x="5" y="5"
			alpha="0.8"
			dragEnabled="true"
			dragMoveEnabled="true"
			dragComplete="catList_dragCompleteHandler(event)"
			dataProvider="{catDB}" 
			dragEnter="catList_dragEnterHandler(event)"
			dragOver="catList_dragOverHandler(event)"
			dragDrop="catList_dragDropHandler(event)"
			skinClass="skins.MyDropSkin" borderAlpha="0.2"
			itemRenderer="itemRenderers.categoryItemRenderer">
		<s:layout>
			<s:HorizontalLayout horizontalAlign="left"
								paddingLeft="12"
								paddingTop="8"/>
		</s:layout>
	</s:List>
</s:Group>
