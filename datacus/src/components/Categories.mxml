<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import flash.events.TouchEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.listClasses.IListItemRenderer;
			import mx.core.FlexGlobals;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.List;
			import spark.events.RendererExistenceEvent;
			import spark.layouts.supportClasses.DropLocation;
			
			/*Variables need for functions within component*/
			[Bindable]
			public var catDB:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			public var dp:ArrayCollection;
			
			//Adds flick event to items in list
			private function addFlick(event:RendererExistenceEvent):void{
				if(Multitouch.supportsGestureEvents){
					event.renderer.addEventListener(TouchEvent.TOUCH_ROLL_OUT, FlexGlobals.topLevelApplication.moveToUnused);
				}
			}
			
			//event handler for entering a drag motion
			protected function catList_dragEnterHandler(event:DragEvent):void
			{
				event.preventDefault();
				var myDragTarget:List=event.currentTarget as List;
				DragManager.acceptDragDrop(myDragTarget);
			}
			
			//handles when a user drags an object over a list
			protected function catList_dragOverHandler(event:DragEvent):void
			{
				var myDropTarget:List=List(event.currentTarget);
				var pos:DropLocation=this.catList.layout.calculateDropLocation(event);
				DragManager.showFeedback(DragManager.COPY);
				myDropTarget.createDropIndicator();
				myDropTarget.layout.showDropIndicator(pos);
			}
			[bindable]
			public var listLengthPriorAdd:int = 0;
			//handles a drop into a dropable list
			protected function catList_dragDropHandler(event:DragEvent):void
			{
				var items:Object=event.dragSource.dataForFormat("itemsByIndex") as Object;
				var myDropTarget:List=List(event.currentTarget);
				var pos:DropLocation;
				var oldList:String = new String();
				if (myDropTarget.dataProvider.length != 0){
					for (var k:int = 0; k < items.length; k++){
						oldList = items[k].listLocation;
						chooseRenderer(items[p]);
						FlexGlobals.topLevelApplication.removeFromList(items[k], oldList);
						var listLength:int = myDropTarget.dataProvider.length
						if (items[k].listLocation == 'ROWS'){
							pos=this.catList.layout.calculateDropLocation(event);
							items[k].number = pos.dropIndex;
							FlexGlobals.topLevelApplication.moveToRows(items);
							for (var x:int=items.length - 1; x >= 0; x--)
							{
								this.catDB.addItemAt(items[x], pos.dropIndex);
								listLengthPriorAdd++;
							}
							myDropTarget.destroyDropIndicator();
						}
						else{
							while (listLengthPriorAdd<listLength){
								if (myDropTarget.dataProvider[listLengthPriorAdd].value != items[k].value){
									pos=this.catList.layout.calculateDropLocation(event);
									items[k].number = pos.dropIndex;
									FlexGlobals.topLevelApplication.moveToRows(items);
									for (var i:int=items.length - 1; i >= 0; i--)
									{
										this.catDB.addItemAt(items[i], pos.dropIndex);
										listLengthPriorAdd++;
									}
									myDropTarget.destroyDropIndicator();
								}
							}
						}
						
					}
				}else{
					pos=this.catList.layout.calculateDropLocation(event);
					for (var p:int=items.length - 1; p >= 0; p--)
					{
						oldList = items[p].listLocation;
						chooseRenderer(items[p]);

						FlexGlobals.topLevelApplication.removeFromList(items[p], oldList);
						items[p].number = 0;
						this.catDB.addItemAt(items[p], pos.dropIndex);
					}
					FlexGlobals.topLevelApplication.moveToRows(items);
					myDropTarget.destroyDropIndicator();
				}
			}
			
			public function chooseRenderer(item:Object):void{
				var renderSel:String = item.selectionType;
				if (renderSel == "MEMBER"){
					catList.itemRenderer = new ClassFactory(memberItemRenderer);
				}
				else if (renderSel == "LEVEL"){
					catList.itemRenderer = new ClassFactory(levelItemRenderer);
				}
				else{
					catList.itemRenderer = new ClassFactory(noLabel);
				}
			}
			
			
			
		]]>
		
		
	</fx:Script>
	<fx:Style source="../skins/style.css" />
	<fx:Declarations>
		<fx:Component className="noLabel">
			<s:ItemRenderer>
				<s:Group>
					<s:layout>
						<s:HorizontalLayout verticalAlign="middle"/>
					</s:layout>
					<s:BorderContainer  height="50" width="105" cornerRadius="1" borderWeight="2"  >
						<s:backgroundFill>
							<s:LinearGradient rotation="90">
								<s:GradientEntry color="#E7F1B5" alpha=".5" />
								<s:GradientEntry color="#F1E91B" alpha=".5" />
							</s:LinearGradient>
							
						</s:backgroundFill>
						
						<s:Label text="{data.label}" width="95" x="2" height="100%" textAlign="center" fontSize="14" verticalAlign="middle"/>
					</s:BorderContainer>
				</s:Group>
			</s:ItemRenderer>
		</fx:Component>
		<fx:Component className="memberItemRenderer">
			<s:ItemRenderer autoDrawBackground="false">
				<s:states>
					<s:State name="normal" />
					<s:State name="down" />
					<s:State name="selected"/>
				</s:states>
				<s:Group>
					<s:layout>
						<s:HorizontalLayout verticalAlign="middle"
											paddingLeft="0"/>
					</s:layout>
					<s:BorderContainer  height="50" width="105" cornerRadius="15" borderWeight="2" >
						<s:backgroundFill>
							<s:LinearGradient rotation="90">
								<s:GradientEntry color.normal="#cdcdcd" color.selected="#999999" color.down="#999999" alpha=".8" />
								<s:GradientEntry color="#ffffff" alpha=".8" />
								<s:GradientEntry color="#ffffff" alpha=".8" />
								<s:GradientEntry color="#ffffff" alpha=".8" />
								<s:GradientEntry color.normal="#cdcdcd" color.selected="#999999" color.down="#999999" alpha=".8" />
							</s:LinearGradient>
							
						</s:backgroundFill>
						
						<s:Label text="{data.label}" width="95" x="2" height="100%" textAlign="center" fontSize="14" verticalAlign="middle"/>
					</s:BorderContainer>
					
				</s:Group>
			</s:ItemRenderer>
		</fx:Component>
		<fx:Component className="levelItemRenderer">
			<s:ItemRenderer autoDrawBackground="false">
				<s:states>
					<s:State name="normal" />
					<s:State name="down" />
					<s:State name="selected"/>
				</s:states>
				<s:Group>
					<s:layout>
						<s:HorizontalLayout verticalAlign="middle"
											paddingLeft="0"/>
					</s:layout>
					<s:BorderContainer  height="50" width="105" cornerRadius="10" borderWeight="2" >
						<s:backgroundFill>
							<s:LinearGradient rotation="90">
								<s:GradientEntry color.normal="#c7cceb" color.selected="#9ba3d8" color.down="#9ba3d8" alpha=".8" />
								<s:GradientEntry color="#ffffff" alpha=".8" />
								<s:GradientEntry color="#ffffff" alpha=".8" />
								<s:GradientEntry color="#ffffff" alpha=".8" />
								<s:GradientEntry color.normal="#c7cceb" color.selected="#9ba3d8" color.down="#9ba3d8" alpha=".8" />
							</s:LinearGradient>
							
						</s:backgroundFill>
						
						<s:Label text="{data.label}" width="95" x="2" height="100%" textAlign="center" fontSize="14" verticalAlign="middle"/>
					</s:BorderContainer>
					
				</s:Group>
			</s:ItemRenderer>
		</fx:Component>
	</fx:Declarations>
	<fx:DesignLayer>
		<s:SkinnableContainer height="100" width="1080" skinClass="skins.Panel" />
		<s:RichText color="#2B4381" fontFamily="Arial" fontSize="20" id="CategoriesLabel" tabStops="S0 S50 S100" text="Categories" x="500" y="79"/>
		<s:BitmapImage id="img"
					   source="@Embed('assets/categories_bg.png')"
					   fillMode="repeat"
					   left="0" right="0"  top="0" bottom="0"/>
	</fx:DesignLayer>	
	<s:List id="catList"
			width="1070"
			height="70"
			x="5" y="5"
			alpha="0.8"
			rendererAdd="addFlick(event)"
			dragEnabled="true"
			dragMoveEnabled="true"
			dataProvider="{catDB}"
			dragEnter="catList_dragEnterHandler(event)"
			dragOver="catList_dragOverHandler(event)"
			dragDrop="catList_dragDropHandler(event)"
			skinClass="skins.MyDropSkin" borderAlpha="0.2">
		<s:layout>
			<s:HorizontalLayout horizontalAlign="left"
								paddingLeft="12"
								paddingTop="8"/>
		</s:layout>
	
		
	</s:List>
</s:Group>
