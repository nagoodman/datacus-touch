<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="152" height="628">	
	<fx:Script>
		<![CDATA[
			//behavior: select measures type via tap or scroll if too many displayed
			//connections: listen to the categories and series for types of measures
			import com.adobe.serialization.json.JSON;
			
			import flash.display.DisplayObject;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			
			import spark.events.RendererExistenceEvent;
			
			
			[bindable]
			public var measuresAC:ArrayCollection = new ArrayCollection();
			
			//adds click event handler on each member of the list as it's created
			private function addClick(event:RendererExistenceEvent):void{
				event.renderer.addEventListener(flash.events.MouseEvent.CLICK, SelectMeasure);
			}
			
			//handles click event on list object
			private function SelectMeasure(e:Event):void{
				var currentMeasure:String = FlexGlobals.topLevelApplication.currentMeasure;
				var newMeasure:String = this.measuresList.selectedItems[0].label;
				
				//sets global current measure
				currentMeasure = newMeasure;
				
				var items:Object = this.measuresList.selectedItems as Object;
				var tempList:ArrayCollection = FlexGlobals.topLevelApplication.filterList;
				for (var i:int = 0; i < tempList.length; i++){
					FlexGlobals.topLevelApplication.removeFromGraph(tempList[i]);
				}
				FlexGlobals.topLevelApplication.filterList = new ArrayCollection();
				//initiates http service to move selected itme to the filter axis
				FlexGlobals.topLevelApplication.moveToFilter(items);
			}
			
			//retrieves the first list in the dimensions array and stores in the Measures panel (consistent across cubes)
			public function getMeasures(event:ResultEvent):void
			{
				//retrieves json from result event and stores as an array
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				
				measuresAC = new ArrayCollection();
				//retrieves information from json and stores within the array collection
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					obj.label = arr[i].caption;
					obj.dimension = arr[i].dimensionUniqueName;
					obj.selectionType = 'MEASURE';
					obj.listLocation = 'MEASURE';
					obj.number = i;
					obj.value = arr[i].uniqueName;
					FlexGlobals.topLevelApplication.currentMeasure = arr[0].uniqueName;
					var objProx:ObjectProxy = new ObjectProxy(obj);
					measuresAC.addItem(objProx);	
				}
				//sets global variables
				FlexGlobals.topLevelApplication.currentMeasure = measuresAC[0];
				FlexGlobals.topLevelApplication.defaultMeasure = measuresAC[0];
				//adds items to the measures list
				measuresList.dataProvider = measuresAC;
			}
			
		]]>
	</fx:Script>
	<fx:Style source="../skins/style.css" />
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:DesignLayer>
		<s:SkinnableContainer height="628" width="152" skinClass="skins.PanelV" styleName="container" />
		<s:BitmapImage source="@Embed('assets/measureslabel.png')"
					   fillMode="clip"
					   horizontalCenter="0"
					   y="20"
					   id="MeasuresLabel"
					   />
		
	</fx:DesignLayer>
	<s:List id="measuresList"
			width="114"
			height="537"
			x="19" y="59"
			rendererAdd="addClick(event)"
			styleName="container"
			skinClass="skins.MyDropSkin" itemRenderer="itemRenderers.measureItemRenderer">
		
		<s:layout>
			<s:VerticalLayout horizontalAlign="center"
							  paddingLeft="0"
							  paddingTop="10" paddingBottom="10"/>
		</s:layout>
		
	</s:List>
</s:Group>