<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:components="components.*"
					   backgroundColor="#FFFFFF"
					   minWidth="1440"
					   minHeight="920"
					   creationComplete="init()" xmlns:create_query="services.create_query.*">  
					<!--make it full screen, but for now...-->
	
	<fx:Script>
		<![CDATA[

			protected function Picker_Open():void
			{
				const state:String = currentState;
				if ( state == 'Page2' ) {
					currentState='Page3';
				}
				populatePicker();
				
			}
			
			protected function Picker_Close():void{
				const state:String = currentState;
				if ( state == 'Page3' ) {
					currentState='Page2';
				}
			}
			
			protected function Home_Open():void{
				const state:String = currentState;
				if ( state == 'Page3' ) {
					currentState='Page1';
				}
				if ( state == 'Page2' ) {
					currentState='Page1';
				}
			}
			
			public function Home_Close():void{
				const state:String = currentState;
				if ( state == 'Page1' ) {
					currentState='Page2';
					var x:int = 5;
				}
				submit_query();
			}
				
				
			import com.adobe.serialization.json.JSON;
			
			import flash.display.Stage;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.ResultEvent;
			
			import services.create_query.*;
			
			import spark.components.List;
			import spark.layouts.supportClasses.DropLocation;
			
			import tuio.*;
			import tuio.TouchEvent;
			import tuio.TuioClient;
			import tuio.connectors.UDPConnector;
			import tuio.debug.TuioDebug;
			import tuio.gestures.DragGesture;
			import tuio.gestures.GestureManager;
			import tuio.mouse.MouseToTouchDispatcher;
			import tuio.windows7.*;
			
			public var tc:TuioClient;
			public var tm:TuioManager;
			//public var gm:GestureManager;
			private var winTouch:Windows7TouchToTuioDispatcher;
			private var mTouch:MouseToTouchDispatcher;
			private var tDbg:TuioDebug;
			protected var mainStage:Stage;
			
			protected function init():void {
				mainStage = this.systemManager.stage;
				//makes full screen, but need to make sizinf relative first
				//mainStage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				tc = new TuioClient(new UDPConnector());
				tm = TuioManager.init(mainStage, tc);
				//gm = GestureManager.init(stage,tc);
				//GestureManager.addGesture(new DragGesture());
				winTouch = new Windows7TouchToTuioDispatcher(mainStage);
				//mTouch = new MouseToTouchDispatcher(mainStage);
				tDbg = TuioDebug.init(mainStage);
				tc.addListener(tDbg);
				//these event listeners need to be added to each object
				mainStage.addEventListener(tuio.TouchEvent.TOUCH_DOWN, handleDown);
				//stage.addEventListener(org.tuio.TouchEvent.TOUCH_MOVE, handleMove);
				mainStage.addEventListener(tuio.TouchEvent.TOUCH_UP, handleUp);	
				//stage.addEventListener(flash.events.TransformGestureEvent.GESTURE_PAN, handleDrag);
				
				

				
			}
			
			
			public function handleDrag(e:TransformGestureEvent):void {
				//trace("dragged");
			}
			
			public function handleDown(e:tuio.TouchEvent):void {
				trace("TOUCHDOWN!");
				trace(e.relatedObject.name);
			}
			
			public function handleUp(e:tuio.TouchEvent):void {
				//trace("TOUCHUP!");
				//trace(e.relatedObject);
			}
			
			public function handleMove(e:tuio.TouchEvent):void {
				//trace("moving");
			} 
			
			String.prototype.replace = function(s:String, z:String):String{
				return unescape(escape(this).split(s).join(z));
			}
			/*
			
			//This is a public function that allows when array on series panel is changed to update the query
			public function moveToColumns(members:Object):void
			{
				for (var i:int = 0; i < members.length; i ++){
					var hierarchy:String = members[i].dimension;
					var dimension:String = hierarchy.replace("[","");
					dimension = dimension.replace("]","");
					var item:String = members[i].value;
					toColumns.url="http://localhost:8080/saiku/rest/saiku/admin/query/"+queryName+"/axis/COLUMNS/dimension/"+dimension+"/hierarchy/"+hierarchy+"/"+item;
					
					toColumns.send();//sends service call to get new graph info 
			}
			
			//This is a public function that allows when array on categories panel is changed to update the query
			public function moveToRows(members:Object):void
			{
				for (var i:int = 0; i < members.length; i ++){
					var hierarchy:String = members[i].dimension;
					var dimension:String = hierarchy.replace("[","");
					dimension = dimension.replace("]","");
					var item:String = members[i].value;
					toRows.url="http://localhost:8080/saiku/rest/saiku/admin/query/"+queryName+"/axis/ROWS/dimension/"+dimension+"/hierarchy/"+hierarchy+"/"+item;
					
					toRows.send();//sends service call to get new graph info 
				}
			}*/
			
			public function getResults():void
			{
				results.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/result"
				results.send();
			}
			
			public function updateGraph(event:ResultEvent):void
			{
				
			}
			
			[Bindable]
			private var destDB:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			public var dimensionsAC:ArrayCollection;
			
			[Bindable]
			public var levelsAC:ArrayCollection;
			
			[Bindable]
			public var membersAC:ArrayCollection;
			
			[Bindable]
			public var measuresAC:ArrayCollection;
			
			[Bindable]
			public var queryName:String;
			
			[Bindable]
			public var currentDimension:String;
			
			[Bindable]
			public var currentHierarchy:String;
			
			[Bindable]
			public var currentLevel:int;
			
			
			public function populatePicker():void{
				queryName = new String();
				queryName = "chartdata";
				callDimensions.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/"
				callDimensions.send()
			}
			public function getDimensions(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				dimensionsAC = new ArrayCollection();
				measuresAC = new ArrayCollection();
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					if(arr[i].caption == 'Measures'){
						obj.label = arr[i].caption;
						obj.text = arr[i].caption;
						obj.value = arr[i].uniqueName;
						measuresAC.addItem(obj);
					}
					else{
						obj.label = arr[i].caption;
						obj.value = arr[i].uniqueName;
						dimensionsAC.addItem(obj);
					}
				}
				picker.DimensionsDLContainer.dimensionsList.dataProvider = dimensionsAC;
				trace(measuresAC[0].value);
				var dimension:String = dimensionsAC[0].label;
				var hierarchy:String = dimensionsAC[0].label;
				callMeasures.send();
				currentDimension = dimension;
				currentHierarchy = hierarchy;
				createLevels(currentDimension, currentHierarchy);
			}
			
			public function createLevels(dimension:String, hierarchy:String):void{
				currentDimension = dimension;
				currentHierarchy = hierarchy;
				
				callLevels.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+dimension+"/hierarchy/"+hierarchy+"/";
				callLevels.send();
			}
			
			public function getMeasures(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				measuresAC = new ArrayCollection();
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					obj.label = arr[i].caption;
					obj.value = arr[i].uniqueName;
					measuresAC.addItem(obj);	
				}
				measures.measuresList.dataProvider = measuresAC;
				
			}
			
			public function getLevels(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				levelsAC = new ArrayCollection();
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					obj.label = arr[i].caption;
					obj.number = i;
					obj.value = arr[i].uniqueName;
					levelsAC.addItem(obj);	
				}
				picker.LevelsDLContainer.levelsList.dataProvider = levelsAC;
				getMembersFromLevels(levelsAC);
			}
			
			public function getMembersFromLevels(levels:ArrayCollection):void
			{
				var i:int = 0;
				if(levels.length > 3){
					for (i = 0; i < 3; i++){
						if (i==0){
							callMembers1.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+currentDimension+"/hierarchy/"+currentHierarchy+"/"+levels[i].label;
							callMembers1.send();
						}
						if (i==1){
							callMembers2.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+currentDimension+"/hierarchy/"+currentHierarchy+"/"+levels[i].label;
							callMembers2.send();
						}
						if (i==2){
							callMembers3.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+currentDimension+"/hierarchy/"+currentHierarchy+"/"+levels[i].label;
							callMembers3.send();
						}			
					}
				}else{
					for (i = 0; i < levels.length; i ++){
						if (i==0){
							callMembers1.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+currentDimension+"/hierarchy/"+currentHierarchy+"/"+levels[i].label;
							callMembers1.send();
						}
						if (i==1){
							callMembers2.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+currentDimension+"/hierarchy/"+currentHierarchy+"/"+levels[i].label;
							callMembers2.send();
						}
						if (i==2){
							callMembers3.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+currentDimension+"/hierarchy/"+currentHierarchy+"/"+levels[i].label;
							callMembers3.send();
						}				
					}			
				}		
			}
			
			public function getMembers1(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				membersAC = new ArrayCollection();
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					obj.label = arr[i].caption;
					obj.dimension = arr[i].dimension;
					obj.value = arr[i].uniqueName;
					membersAC.addItem(obj);	
				}
				picker.MembersDLContainer.membersLevel1.dataProvider = membersAC;
			}
			
			public function getMembers2(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				membersAC = new ArrayCollection();
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					obj.label = arr[i].caption;
					obj.dimension = arr[i].dimension;
					obj.value = arr[i].uniqueName;
					membersAC.addItem(obj);	
				}
				picker.MembersDLContainer.membersLevel2.dataProvider = membersAC;
			}
			
			public function getMembers3(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				membersAC = new ArrayCollection();
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					obj.label = arr[i].caption;
					obj.dimension = arr[i].dimension;
					obj.value = arr[i].uniqueName;
					membersAC.addItem(obj);	
				}
				picker.MembersDLContainer.membersLevel3.dataProvider = membersAC;
			}
			
			
			

			public function submit_query():void
			{
				CreateQueryResult.token = create_Query.CreateQuery(connectionTextInput.text ,cubeTextInput.text,catalogTextInput.text,schemaTextInput.text);
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="Page1"/>
		<s:State name="Page2"/>
		<s:State name="Page3"/>
	</s:states>
	<fx:Declarations>
		<s:HTTPService
			id="callDimensions"
			resultFormat="text"
			result="getDimensions(event)" />
		<s:HTTPService
			id="callMeasures"
			resultFormat="text"
			url="http://localhost:8080/saiku/json/saiku/admin/query/chartdata/axis/UNUSED/dimension/Measures/hierarchy/Measures/MeasuresLevel"
			result="getMeasures(event)" />
		<s:HTTPService
			id="callLevels"
			resultFormat="text"
			result="getLevels(event)" />
		<s:HTTPService
			id="callMembers1"
			resultFormat="text"
			result="getMembers1(event)" />
		<s:HTTPService
			id="callMembers2"
			resultFormat="text"
			result="getMembers2(event)" />
		<s:HTTPService
			id="callMembers3"
			resultFormat="text"
			result="getMembers3(event)" />
		
		<!-- request to server to move a new item to the ROWS (categories) axis for graphing-->
		<s:HTTPService id="toRows" resultFormat="text"
			method="POST" result="getResults()">
			<s:request xmlns="">
				<position>0</position>
				<memberposition>-1</memberposition>
			</s:request>
		</s:HTTPService>
		
		<!-- request to server to move a new item to the Columns (Series) axis for graphing-->
		<s:HTTPService id="toColumns" resultFormat="text"
			method="POST" result="getResults()">
			<s:request xmlns="">
				<position>0</position>
				<memberposition>-1</memberposition>
			</s:request>
		</s:HTTPService>
		
		<!-- request to server to get the new chart information back from the server for graphing values-->
		<s:HTTPService id="results" resultFormat="text"
			url="http://localhost:8080/saiku/json/saiku/admin/query/chartdata/result"
			method="GET" result="updateGraph(event)" />
		<create_query:Create_Query id="create_Query" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		<s:CallResponder id="CreateQueryResult"/>
		
	</fx:Declarations>
	<fx:DesignLayer id="background">
<!--		I bet there's a better way to do the background		 -->
		<s:Rect id="bg" 
				width="100%" height="100%" 
				x="0" y="0">
			<s:fill>
				<s:SolidColor color="#CFE8FF"/>
			</s:fill>
			<s:filters>
				<s:GlowFilter alpha="1.0" blurX="6.0" blurY="6.0" color="0x5380d0" inner="true" knockout="false" quality="2" strength="1"/>
			</s:filters>
		</s:Rect>
	</fx:DesignLayer>
	<fx:DesignLayer id="panels">
<!--		organized left to right then top to bottom		 -->
		<components:Home id="home"
			x="20" y="20"
			click="Home_Open()"
			currentState.Page2="Home2"
			currentState.Page3="Home3">
		</components:Home>
		<components:Measures id="measures"
 			left="20" top="260"
		/>
		<components:StateStep id="stateStep"
			x="20" y="780"
		/>
		<components:Pager id="pager"
			x="180" y="20"
		/>
		<components:Series id="series"
			x="180" y="140"
		/>
		<components:Graph id="graph" 
			x="180" y="260"
		/>
		<components:Categories id="categories"
			x="180" y="780"
		/>
		<components:ServerStatus id="serverStatus"
			x="1280" y="20"
		/>
		<components:Sets id="sets"
			x="1280" y="140"
		/>
		<components:Picker id="picker"
			x="180" y="260"
			click="Picker_Open()" 
			currentState.Page2="State2"
			currentState.Page3="State3">
		</components:Picker>
		<components:Trash id="trash"
			x="1280" y="780"
		/>	
	</fx:DesignLayer>
	<mx:Form includeIn="Page1" defaultButton="{button}" id="ConnectionForm" x='595' y='450' >
		<mx:FormItem label="Connection" id="Connection">
			<s:TextInput id="connectionTextInput"/>
		</mx:FormItem>
		<mx:FormItem label="Cube">
			<s:TextInput id="cubeTextInput"/>
		</mx:FormItem>
		<mx:FormItem label="Catalog">
			<s:TextInput id="catalogTextInput"/>
		</mx:FormItem>
		<mx:FormItem label="Schema">
			<s:TextInput id="schemaTextInput"/>
		</mx:FormItem>
		<s:Button label="CreateQuery" id="button" click="Home_Close()" />
	</mx:Form>
	<s:Button includeIn="Page3" x='220' y='300' id="closePicker" label="Close X" click="Picker_Close()">
	</s:Button>
	<s:transitions>
		<s:Transition autoReverse="true" fromState="Page1" toState="Page2">
			<s:Parallel>
				<s:Parallel target="{home}">
					<s:SetAction property="currentState" value="Home2" />
				</s:Parallel>
				<s:Parallel target="{ConnectionForm}">
					<s:Fade duration="100" startDelay="0"/>
				</s:Parallel>
				<s:Parallel target="{picker}">
					<s:SetAction property="currentState" value="State2" />
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page2" toState="Page1">
			<s:Parallel>
				<s:Parallel target="{home}">
					<s:SetAction property="currentState" value="Home1" />
				</s:Parallel>
				<s:Parallel target="{ConnectionForm}">
					<s:Fade duration="500" startDelay="400"/>
				</s:Parallel>
				<s:Parallel target="{picker}">
					<s:SetAction property="currentState" value="State1" />
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page2" toState="Page3">
			<s:Parallel>
				<s:Parallel target="{home}">
					<s:SetAction property="currentState" value="Home3" />
				</s:Parallel>
				<s:Parallel target="{picker}">
					<s:SetAction property="currentState" value="State3" />
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page3" toState="Page2">
			<s:Parallel>
				<s:Parallel target="{home}">
					<s:SetAction property="currentState" value="Home2" />
				</s:Parallel>
				<s:Parallel target="{picker}">
					<s:SetAction property="currentState" value="State2" />
				</s:Parallel>
			</s:Parallel>			
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page3" toState="Page1">
			<s:Parallel>
				<s:Parallel target="{ConnectionForm}">
					<s:Fade duration="500" startDelay="400"/>
				</s:Parallel>
			</s:Parallel>			
		</s:Transition>
	</s:transitions>
</s:WindowedApplication>
