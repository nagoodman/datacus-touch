<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:components="components.*"
					   backgroundColor="#FFFFFF"
					   minWidth="1440"
					   minHeight="920"
					   creationComplete="init()" xmlns:create_query="services.create_query.*" xmlns:submit_query="services.submit_query.*">  
					<!--make it full screen, but for now...-->
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import flash.display.Stage;
			import flash.events.TouchEvent;
			import flash.utils.*;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.containers.TitleWindow;
			import mx.controls.*;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.messaging.channels.StreamingAMFChannel;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			
			import services.create_query.*;
			
			import spark.components.DropDownList;
			import spark.components.List;
			import spark.components.RichText;
			import spark.layouts.supportClasses.DropLocation;
			
			/*import tuio.TuioClient;
			import tuio.connectors.UDPConnector;
			import tuio.debug.TuioDebug;
			import tuio.gestures.DragGesture;
			import tuio.gestures.GestureManager;
			import tuio.mouse.MouseToTouchDispatcher;
			import tuio.windows7.*;*/
			
			protected var mainStage:Stage;
			[bindable]
			public var serverIDBase:String = new String(); //= "http://localhost:8080/saiku/";
			[bindable]
			public var userID:String = new String(); // = 'admin';
			[bindable]
			public var serverIDRest:String = new String(); //= "http://localhost:8080/saiku/rest/saiku/"+userID+"/query/";
			[bindable]
			public var serverIDJSON:String = new String();// = "http://localhost:8080/saiku/json/saiku/"+userID+"/query/";
			
			/*Variables used with touch gesture handling*/
			public var touchX:int;

			//public var gm:GestureManager;

			//private var mTouch:MouseToTouchDispatcher;

			
			/*Function first initiated when software starts*/
			protected function init():void {
				//Init Touch
				var touchSupport:Boolean = Multitouch.supportsTouchEvents;
				var gestureSupport:Boolean = Multitouch.supportsGestureEvents;
				Multitouch.inputMode = MultitouchInputMode.GESTURE;
				
				//Init Listeners
				picker.addEventListener(MouseEvent.MOUSE_DOWN, pickerDown);
				picker.addEventListener(MouseEvent.CLICK, Picker_Open);
				home.addEventListener(MouseEvent.MOUSE_DOWN, Home_Open);
				trash.addEventListener(MouseEvent.MOUSE_DOWN, Trash_Open);
				sets.addEventListener(MouseEvent.MOUSE_DOWN, Sets_Open);
				serverStatus.addEventListener(MouseEvent.MOUSE_DOWN, Connection_Open);
				//picker.addEventListener(MouseEvent.ROLL_OUT, pickerFlick);
				
/* 				//TUIO Init
				mainStage = this.systemManager.stage;
				tc = new TuioClient(new UDPConnector());
				tm = TuioManager.init(mainStage, tc);
				mTouch = new MouseToTouchDispatcher(mainStage);
				//gm = GestureManager.init(stage,tc);
				//GestureManager.addGesture(new DragGesture());
				//tDbg = TuioDebug.init(mainStage);
				//tc.addListener(tDbg);
				
				//Event Listeners
				picker.addEventListener(tuio.TouchEvent.ROLL_OUT, pickerFlick);
				//mainStage.addEventListener(tuio.TouchEvent.TOUCH_DOWN, handleDown);
				//stage.addEventListener(org.tuio.TouchEvent.TOUCH_MOVE, handleMove);
				//mainStage.addEventListener(tuio.TouchEvent.TOUCH_UP, handleUp);	
				//stage.addEventListener(flash.events.TransformGestureEvent.GESTURE_PAN, handleDrag);
 */
				//try {
				//	CreateSession.url = serverIDBase+'rest/saiku/session';
				//	CreateSession.send();
				//} catch (error:IOError) {
				//	error_window("The Saiku Server is not running. Please close the application, start the Saiku server, and restart the application.");
				//}
			}
			
			//Touch Handlers
			public function pickerDown(e:MouseEvent):void {
				trace("in mouseDown");
//				if (currentState == 'State1') {
//					trace("in state1");
					touchX = e.stageX;
					this.addEventListener(MouseEvent.MOUSE_MOVE, pickerMove);
					this.addEventListener(MouseEvent.MOUSE_UP, pickerUp);
//				}
/* 				else if (currentState == 'State2') {
					
				}
				else if (currentState == 'State3') {
					
				} */
			}
			
			public function pickerMove(e:MouseEvent):void {
				trace("in mouse move");
				var offsetX:int = e.stageX - touchX;
				trace(offsetX);
				picker.x += offsetX;
				trace(picker.width);
				picker.width -= offsetX;
				trace(picker.width);
				touchX = e.stageX;
			}
			
			public function pickerUp(e:MouseEvent):void {
				this.removeEventListener(MouseEvent.MOUSE_MOVE, pickerMove);
				this.removeEventListener(MouseEvent.MOUSE_UP, pickerUp);
			}	
			
			//Handles a flick gesture on the picker
			public function pickerFlick(e:TransformGestureEvent):void {
				var event:MouseEvent;
				Picker_Open(event);
			}
			
			public function pickerFlickClose(e:TransformGestureEvent):void{
				var event:MouseEvent;
				Picker_Close(event);
			}

			
			public function homeFlick(e:MouseEvent):void {
				//Home_Open();
				picker.removeEventListener(MouseEvent.ROLL_OUT, homeFlick);
			}
			
			
/* 			public function pickerFlick(e:MouseEvent):void {
				Picker_Open();
			} */
			
			public function handleDrag(e:TransformGestureEvent):void {
				//trace("dragged");
			}
			
			
			//Verify a connection
			protected function checkResponse(event:ResultEvent):void{
				if (event.statusCode == 200){
					serverStatus.Connection_Close();
					var e:MouseEvent;
					Home_Open(e);
				}
			}
			
			//Attempts to create a session the specified server with login credentials
			public function submit_conn():void{
				try {
					userID = serverStatus.Uname.text;
					serverIDBase = serverStatus.ServerAddy.text + '/saiku/';
					serverIDRest = serverIDBase + 'rest/saiku/'+userID+'/query/';
					serverIDJSON = serverIDBase + 'json/saiku/'+userID+'/query/';
					CreateSession.url = serverIDBase+'rest/saiku/session';
					CreateSession.send();
				} catch (error:IOError) {
					error_window("The Saiku Server is not running. Please close the application, start the Saiku server, and restart the application.");
				}
			}
			
			/*Functions to handle state changes*/
			
			//Opens the connection menu by changing the state
			public function Connection_Open(e:MouseEvent):void{
				trash.Trash_Close();
				sets.Sets_Close();
				home.Home_Close();
				Picker_Close(e);
				serverStatus.removeEventListener(MouseEvent.MOUSE_DOWN, Connection_Open);
				home.currentState="Home1";
				serverStatus.currentState = "State1";
				//currentState="Page1";
			}
			
			
			//Automatically Opens Picker by changing the current state
			//Attached to a Flick and a One-Finger-Touch
			public function Picker_Open(e:MouseEvent):void
			{
				trash.Trash_Close();
				sets.Sets_Close();
				home.Home_Close();
				serverStatus.Connection_Close();
				picker.removeEventListener(MouseEvent.MOUSE_DOWN, pickerDown);
				picker.removeEventListener(MouseEvent.CLICK, Picker_Open);
	
				picker.currentState = "State3";
				picker.populatePicker();
				picker.PickerClose.addEventListener(MouseEvent.MOUSE_DOWN, Picker_Close);

			}
			
			//Closes the Picker automatically by changing the state
			public function Picker_Close(e:MouseEvent):void{
				if (picker.currentState == "State3"){
					picker.PickerClose.removeEventListener(MouseEvent.MOUSE_DOWN, Picker_Close);
				}
				picker.currentState= "State2";
				picker.addEventListener(MouseEvent.MOUSE_DOWN, pickerDown);
				picker.addEventListener(MouseEvent.CLICK, Picker_Open);
			}
			
			//Opens the home menu by changing the state
			public function Home_Open(e:MouseEvent):void{
				trash.Trash_Close();
				sets.Sets_Close();
				Picker_Close(e);
				serverStatus.Connection_Close();
				home.removeEventListener(MouseEvent.MOUSE_DOWN, Home_Open);
				home.currentState = "Home2";
				GetSourceOptions.url = serverIDBase+'json/saiku/'+userID+'/datasources';
				GetSourceOptions.send();

			}
			
			//Opens the trash can by changing the state
			public function Trash_Open(e:MouseEvent):void{
				serverStatus.Connection_Close();
				sets.Sets_Close();
				home.Home_Close();
				Picker_Close(e);
				trash.trashList.dataProvider = null;
				trash.removeEventListener(MouseEvent.MOUSE_DOWN, Trash_Open);
				trash.currentState = "State2";
			}
			

			
			//Opens the sets menu by changing the state
			public function Sets_Open(e:MouseEvent):void{
				trash.Trash_Close();
				serverStatus.Connection_Close();
				home.Home_Close();
				Picker_Close(e);
				sets.removeEventListener(MouseEvent.MOUSE_DOWN, Sets_Open);
				sets.retrieveActiveSets();
				sets.currentState = "Sets2";
			}
			

			//Submits the user generated query and takes application to next State
			public function submit_form():void{
				home.Home_Close();
				submit_query();
			}
				
			
			/*Variables used to create drop down menus for creating a new query*/
			private var connectionArray:ArrayCollection = new ArrayCollection();
			private var catalogArray:ArrayCollection = new ArrayCollection();
			private var schemaArray:ArrayCollection = new ArrayCollection();
			private var cubeArray:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var queryName:String = 'chartdata';
			
			[Bindable]
			public var currentQueryName:String = new String();
			
			//Fills the home menu based off information retrieved from the server
			private function fillHomeMenu(event:ResultEvent):void{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				
				for (var i:int =0; i < arr.length; i++){
					var con:Object = new Object;
					con.label = arr[i].connectionName;
					con.data = arr[i].connectionName;
					connectionArray.addItemAt(con, i);
					for (var j:int = 0; j< arr[i].catalogs.length; j++){
						var cat:Object = new Object;
						cat.label = arr[i].catalogs[j].name;
						cat.data = arr[i].catalogs[j].name;
						catalogArray.addItemAt(cat, j);
						for (var k:int = 0; k < arr[i].catalogs[j].schemas.length; k++){
							var schem:Object = new Object;
							schem.label = arr[i].catalogs[j].schemas[k].name;
							schem.data = arr[i].catalogs[j].schemas[k].name;
							schemaArray.addItemAt(schem, k);
							for (var l:int = 0; l < arr[i].catalogs[j].schemas[k].cubes.length; l++){
								var cube:Object = new Object;
								cube.label = arr[i].catalogs[j].schemas[k].cubes[l].cubeName;
								cube.data = arr[i].catalogs[j].schemas[k].cubes[l].cubeName;
								cubeArray.addItemAt(cube, k);
							}
						}
					}	
				}
				//Fills available connection options
				home.connectionDropDown.dataProvider = connectionArray;
				home.connectionDropDown.selectedIndex=0;
				//Fills available catalog options
				home.catalogDropDown.dataProvider = catalogArray;
				home.catalogDropDown.selectedIndex=0;
				//Fills available schema options
				home.schemaDropDown.dataProvider = schemaArray;
				home.schemaDropDown.selectedIndex=0;
				//Fills available cube options
				home.cubeDropDown.dataProvider = cubeArray;
				home.cubeDropDown.selectedIndex=0;
			}
			
			//Produces an error window native to the application to overwrite
			//the default Adobe Air window
			public function error_window(error_message:String):void {
				var popup:TitleWindow = new TitleWindow();
				popup.showCloseButton = true;
				popup.addEventListener(Event.CLOSE, closeTitleWindow);
				var label:Label = new Label();
				label.text = error_message;
				popup.addChild(label);
				PopUpManager.addPopUp(popup, this, true);
				PopUpManager.centerPopUp(popup);
			}
			
			//Error handling when application cannot connect to the server
			private function faultHandler(evt:FaultEvent):void {
				var errors:String = "The Saiku Server is not running. " +
					"Please close the application, start the Saiku server, " +
					"and restart the application."	
				error_window(errors);
			}
			
			//Creates a query in which the user manipulates through Datacus
			public function submit_query():void
			{

				measures.measuresList.dataProvider = null;
				graph.removeAllElements();
				graphLegend.removeAllElements();
				series.serDB = new ArrayCollection;
				categories.catDB = new ArrayCollection;	
				trash.trashDB = new ArrayCollection;
				seriesList = new ArrayCollection;
				categoriesList = new ArrayCollection;
				//categories.catList.dataProvider = new ArrayList;
				//series.serList.dataProvider = new ArrayList;
				
				//CreateQueryResult.token = create_Query.CreateQuery(connectionDropDown.selectedItem.data,cubeDropDown.selectedItem.data,catalogDropDown.selectedItem.data,schemaDropDown.selectedItem.data);
				//queryName = QueryName.text;
				//currentQueryName = QueryName.text;
				currentQueryName = new String();
				currentQueryName = 'chartdata';
//				var popup:TitleWindow = new TitleWindow();
//				popup.showCloseButton = true;
//				popup.addEventListener(Event.CLOSE, closeTitleWindow);
//				var label:Label = new Label();
//				label.text = "You must enter a valid name for the query. Query names must not be blank, cannot contain special characters, and cannot contain more than 20 characters.";
//				popup.addChild(label);
				//var pattern1:RegExp = new RegExp("[!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\_\\\\=\\+\\/\\,\\.\\<\\>\\?\\~\\`\\\]");
				var pattern1:RegExp = new RegExp("^[a-zA-Z0-9]+");
				var pattern2:RegExp = new RegExp("[!@#$%^&*()+=,.<>\\]\\[;:'/\]");
				if (queryName == "" || queryName.length > 20 
					|| !(queryName.match(pattern1)) 
					|| queryName.match(pattern2)){
					error_window("You must enter a valid name for the query. " +
						"Query names must not be blank and cannot contain spaces, " +
						"special characters, or more than 20 characters.");
				} else {
					submit.url= serverIDRest + queryName+"/";
					var params:Object = {};
					//params['connection'] = connectionDropDown.selectedItem.data;
					//params['cube'] = cubeDropDown.selectedItem.data;
					//params['catalog'] = catalogDropDown.selectedItem.data;
					//params['schema'] = schemaDropDown.selectedItem.data;
					//submit.send(params);//sends service call to get new graph info 
					CreateQueryResult.token = create_Query.CreateQuery(home.connectionDropDown.selectedItem.data,home.cubeDropDown.selectedItem.data,home.catalogDropDown.selectedItem.data,home.schemaDropDown.selectedItem.data);
					//Submit_QueryResult.token = submit_Query.Submit_Query(QueryName.text,connectionDropDown.selectedItem.data,cubeDropDown.selectedItem.data,catalogDropDown.selectedItem.data,schemaDropDown.selectedItem.data);
				}
			}
			
			//function for closing the popup windows
			public function closeTitleWindow(evt:CloseEvent):void {
				PopUpManager.removePopUp(TitleWindow(evt.target));
			}
			/*Variables used to populate the Picker*/
			[Bindable]
			private var destDB:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			public var dimensionsAC:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var levelsAC:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var membersAC:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var measuresAC:ArrayCollection = new ArrayCollection();
			
			[bindable]
			public var setsAC:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var currentDimension:String = new String();
			
			[Bindable]
			public var currentHierarchy:String = new String();
			
			[Bindable]
			public var currentLevel:int = new int();
			
			[Bindable]
			public var currentMeasure:Object = new Object();
			
			[Bindable]
			public var defaultMeasure:Object = new Object();
			
			
			//Removes the graphical representation of data from a given list and can remove an item from the graph
			public function removeFromList(member:Object, listIdentifier:String):void
			{
				var memberIndex:int;
				if (listIdentifier == 'ROWS'){
					if (member.listLocation == 'COLUMNS'){
						memberIndex = member.number;
					}else{
						memberIndex = categoriesList.getItemIndex(member);
					}
					categoriesList.removeItemAt(memberIndex);
					if (member.newList == 'TRASH'){
						removeFromGraph(member);
					}
					if (member.dimension != "[Measures]"){
						categories.catList.dataProvider.removeItemAt(memberIndex);
					}
				}
				else if (listIdentifier == 'COLUMNS'){
					if (member.listLocation == 'ROWS'){
						memberIndex = member.number;
					}else{
						memberIndex = seriesList.getItemIndex(member);
					}
					seriesList.removeItemAt(memberIndex);
					if (member.newList == 'TRASH'){
						removeFromGraph(member);
					}
					if (member.dimension != "[Measures]"){
						series.serList.dataProvider.removeItemAt(memberIndex);
					}
				}
				else if (listIdentifier == 'LEVEL'){
					//should not remove the levels but the members within that level to keep the tree structure in picker
					//picker.LevelsDLContainer.levelsList.dataProvider.removeItemAt(memberIndex);
				}
				else if (listIdentifier == 'MEMBER1'){
					memberIndex = picker.MembersDLContainer.membersLevel1.dataProvider.getItemIndex(member);
					picker.MembersDLContainer.membersLevel1.dataProvider.removeItemAt(memberIndex);
				}
				else if (listIdentifier == 'MEMBER2'){
					memberIndex = picker.MembersDLContainer.membersLevel2.dataProvider.getItemIndex(member);
					picker.MembersDLContainer.membersLevel2.dataProvider.removeItemAt(memberIndex);
				}
				else if (listIdentifier == 'MEMBER3'){
					memberIndex = picker.MembersDLContainer.membersLevel3.dataProvider.getItemIndex(member);
					picker.MembersDLContainer.membersLevel3.dataProvider.removeItemAt(memberIndex);
				}
				else if (listIdentifier == 'MEMBER4'){
					memberIndex = picker.MembersDLContainer.membersLevel4.dataProvider.getItemIndex(member);
					picker.MembersDLContainer.membersLevel4.dataProvider.removeItemAt(memberIndex);
				}
			}
			
			
			//removes a specified item from the current graph
			public function removeFromGraph(members:Object):void
			{
				var originalLocation:String = members.listLocation;
				var dimension:String = cleanDimension(members.dimension);
				var hierarchy:String = cleanHierarchy(members.dimension);
				var item:String = cleanItem(members.value);
				
				var params:Object = {};
				if (members.selectionType =='LEVEL' || members.selectionType == 'MEMBER'){
					if (members.selectionType == 'LEVEL'){
						remove.url=serverIDRest+queryName+"/axis/"+originalLocation+"/dimension/"+dimension+"/hierarchy/"+hierarchy+"/"+item;
					}
					if (members.selectionType == 'MEMBER'){
						remove.url=serverIDRest+queryName+"/axis/"+originalLocation+"/dimension/"+dimension+"/member/"+item;
					}
					remove.headers['X-HTTP-Method-Override'] = 'DELETE';
					params['position'] = members.itemPosition;
					params['memeberposition'] = members.itemMemberPosition;
					remove.send(params);//sends service call to get new graph info 
				}else{
					removeMeasure.url=serverIDRest+queryName+"/axis/"+originalLocation+"/dimension/"+dimension+"/member/"+item;
					removeMeasure.headers['X-HTTP-Method-Override'] = 'DELETE';
					params['position'] = members.itemPosition;
					params['memeberposition'] = members.itemMemberPosition;
					removeMeasure.send(params);
				}
			}
			
			/*The global variables used within the series and categories panels*/
			[Bindable]
			public var seriesList:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			public var categoriesList:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			public var nextRowItemPosition:int = new int();
			
			[Bindable]
			public var nextColumnItemPosition:int = new int();
			
			//Replaces a given string with a new string; used for URLEncoding
			String.prototype.replace = function(s:String, z:String):String{
				return unescape(escape(this).split(s).join(z));
			}
			
			//Deep copies an item, so you can manipulate a temporary list without changing the original
			public function clone(source:Object):*{
				var buffer:ByteArray = new ByteArray();
				buffer.writeObject(source);
				buffer.position = 0;
				return buffer.readObject();
			}
			
			//Converts dimension into urlencode for server calls
			public function cleanDimension(dimension:String):String{
				dimension = dimension.replace("[","");
				dimension = dimension.replace("]","");
				return dimension;
			}
			
			//Converts hierarchy into urlencode for server calls
			public function cleanHierarchy(hierarchy:String):String{
				hierarchy = hierarchy.replace('[','%5B');
				hierarchy = hierarchy.replace(']','%5D');
				return hierarchy;
			}
			
			//Converts item into urlencode for server calls
			public function cleanItem(item:String):String{
				item = item.replace('[','%5B');
				item = item.replace(']','%5D');
				item = item.replace('[','%5B');
				item = item.replace(']','%5D');
				item = item.replace('[','%5B');
				item = item.replace(']','%5D');
				return item;
			}
			
			/*The following are functions for posting to different axises on the server and create a resulting graph*/
			
			//This is a public function that allows when array on series panel is changed to update the query
			public function moveToColumns(members:Object):void
			{
				var hierarchy:String;
				var dimension:String;
				var item:String;
				for (var i:int = 0; i < members.length; i ++){
					seriesList.addItem(members[i]);
					members[i].listLocation = 'COLUMNS';
					members[i].itemMemberPosition = seriesList.length -1;
					members[i].itemPosition = nextColumnItemPosition;
					dimension = cleanDimension(members[i].dimension);
					hierarchy = cleanHierarchy(members[i].dimension);
					item = cleanItem(members[i].value);
						
					if (members[i].selectionType == 'LEVEL'){
						toColumns.url=serverIDRest+queryName+"/axis/COLUMNS/dimension/"+dimension+"/hierarchy/"+hierarchy+"/"+item;
					}
					if (members[i].selectionType == 'MEASURE'){
						removeFromGraph(currentMeasure);
						removeFromGraph(defaultMeasure);
						toColumns.url=serverIDRest+queryName+"/axis/COLUMNS/dimension/"+dimension+"/member/"+item;
						currentMeasure = members[i];
					}
					if (members[i].selectionType == 'MEMBER'){
						toColumns.url=serverIDRest+queryName+"/axis/COLUMNS/dimension/"+dimension+"/member/"+item;
					}
				
					var params:Object = {};
					params["position"] = nextColumnItemPosition;
					params["memberposition"] = seriesList.length -1;
					
					toColumns.send(params);//sends service call to get new graph info 
					
					nextColumnItemPosition = nextColumnItemPosition + 1;
				}
			}
			
			
			//This is a public function that allows when array on categories panel is changed to update the query
			public function moveToRows(members:Object):void
			{
				var hierarchy:String;
				var dimension:String;
				var item:String;
					for (var i:int = 0; i < members.length; i ++){
						categoriesList.addItem(members[i]);
						members[i].listLocation = 'ROWS';
						members[i].itemMemberPosition = members[i].number;//categoriesList.length -1;
						members[i].itemPosition = members[i].number;//nextRowItemPosition;
						dimension = cleanDimension(members[i].dimension);
						hierarchy = cleanHierarchy(members[i].dimension);
						item = cleanItem(members[i].value);
						
						if (members[i].selectionType == 'LEVEL'){
							toRows.url=serverIDRest+queryName+"/axis/ROWS/dimension/"+dimension+"/hierarchy/"+hierarchy+"/"+item;
						}
						if (members[i].selectionType == 'MEMBER'){
							toRows.url=serverIDRest+queryName+"/axis/ROWS/dimension/"+dimension+"/member/"+item;
						}
	
				
					var params:Object = {};
					params["position"] = members[i].number;//nextRowItemPosition;
					params["memberposition"] = members[i].number;//categoriesList.length -1;

					toRows.send(params);//sends service call to get new graph info 
					
					nextRowItemPosition = nextRowItemPosition + 1;
				}
			}
			
			//This is the public function that moves items back to the picker, but not to the trash can
			//Associated with flicking items off panels instead of dragging and dropping in trash
			public function moveToUnused(members:Object):void{
				var hierarchy:String;
				var dimension:String;
				var item:String;
				for (var i:int = 0; i < members.length; i ++){
					categoriesList.addItem(members[i]);
					members[i].listLocation = 'UNUSED';
					dimension = cleanDimension(members[i].dimension);
					hierarchy = cleanHierarchy(members[i].dimension);
					item = cleanItem(members[i].value);
					
					if (members[i].selectionType == 'LEVEL'){
						toUnused.url=serverIDRest+queryName+"/axis/UNUSED/dimension/"+dimension+"/hierarchy/"+hierarchy+"/"+item;
					}
					if (members[i].selectionType == 'MEMBER'){
						toUnused.url=serverIDRest+queryName+"/axis/UNUSED/dimension/"+dimension+"/member/"+item;
					}	
					toUnused.send();//sends service call to get new graph info 
				}
			}
			
			//forms url string to retrieve results of a query
			public function getResults():void
			{
				if((seriesList.length > 0) && (categoriesList.length > 0)){
					results.url=serverIDJSON+queryName+"/result"
					results.send();
				}else{
					graph.removeAllElements();
					graphLegend.removeAllElements();
				}
			}
			
			//Globals variables associated with the data retrieved from database about
			//items that were selected to be graphed
			[bindable]
			public var chartData:ArrayCollection;
			[bindable]
			public var columnHeaderArray:ArrayCollection;
			[bindable]
			public var rowHeaderArray:ArrayCollection;
			[bindable]
			public var dataCellArray:ArrayCollection;

			
			//parses results array and stores in an ArrayCollection
			public function updateGraphData(event:ResultEvent):void
			{
				columnHeaderArray = new ArrayCollection;
				rowHeaderArray = new ArrayCollection;
				dataCellArray = new ArrayCollection;
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				if (arr.length == 0){
					graph.removeAllElements();
					graphLegend.removeAllElements();
				}
				else{
					for (var i:int = 0; i < arr.length; i++){
						for (var j:int = 0; j<arr[i].length; j++){
							if ((arr[i][j].type == "COLUMN_HEADER")&& (arr[i][j].value != 'null')){
								if ((arr[i][j].value != arr[i][j-1].value) && (columnHeaderArray.length < (arr[i].length - 1))){ //arr[i].length-1 does not allow for multiple measures to be displayed at once
									columnHeaderArray.addItem(arr[i][j]);
								}
							}
							if ((arr[i][j].type == "ROW_HEADER") && (arr[i][j].value != 'null')){
								rowHeaderArray.addItem(arr[i][j]);
							}
							if ((arr[i][j].type == "DATA_CELL") && (arr[i][j].value != 'null')){
								var tempItem:String = arr[i][j].value;
								var passItem:int = int(tempItem.replace(',',''))
								dataCellArray.addItem(passItem);
							}
						}
					}
					var dataIterator:int = 0;
					var tempObj:Object;
					chartData = new ArrayCollection();
					if (rowHeaderArray.length > columnHeaderArray.length){
						for (var k:int = 0; k<rowHeaderArray.length; k++){
							tempObj = new Object();
							tempObj[rowHeaderArray[k].type] = rowHeaderArray[k].value;
							for (var l:int = 0; l<columnHeaderArray.length; l++){
								tempObj[columnHeaderArray[l].value] = dataCellArray[dataIterator];
								dataIterator++;
							}
							chartData.addItem(tempObj);
						}
					}else{
						for (var n:int = 0; n<rowHeaderArray.length; n++){
							tempObj = new Object();
							tempObj[columnHeaderArray[n].type] = rowHeaderArray[n].value;
							for (var o:int = 0; o<columnHeaderArray.length; o++){
								tempObj[columnHeaderArray[o].value] = dataCellArray[dataIterator];
								dataIterator++;
							}
							chartData.addItem(tempObj);
						}
						
					};
					graph.graphTypeDefault();
				}
				

			}
			
			
			
			public function getData(dropDown:*):String{
				return dropDown.data;
			}
			
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:HTTPService
			id="CreateSession"
			resultFormat='xml'
			result="checkResponse(event)" 
			fault="faultHandler(event)"
			requestTimeout="-1" />
		<s:HTTPService
			id="GetSourceOptions"
			resultFormat='text'
			result="fillHomeMenu(event)"/>
		<s:HTTPService
			id="retrieveSets"
			resultFormat="text" method="GET"
			result="sets.getSets(event)"/>
		<s:HTTPService
			id="callDimensions"
			resultFormat="text"
			result="picker.DimensionsDLContainer.getDimensions(event)" />
		<s:HTTPService
			id="callMeasures"
			resultFormat="text"
			result="measures.getMeasures(event)" />
		<s:HTTPService
			id="callLevels"
			resultFormat="text"
			result="picker.LevelsDLContainer.getLevels(event)" />
		<s:HTTPService
			id="callMembers1"
			resultFormat="text"
			result="picker.MembersDLContainer.getMembers1(event)" />
		<s:HTTPService
			id="callMembers2"
			resultFormat="text"
			result="picker.MembersDLContainer.getMembers2(event)" />
		<s:HTTPService
			id="callMembers3"
			resultFormat="text"
			result="picker.MembersDLContainer.getMembers3(event)" />
		<s:HTTPService
			id="callMembers4"
			resultFormat="text"
			result="picker.MembersDLContainer.getMembers4(event)" />
		
		<mx:HTTPService id="submit" resultFormat="text" contentType="application/xml" 
					   method="POST" >
			<mx:request xmlns="">
				<connection>{getData(home.connectionDropDown.selectedItem)}</connection>
				<cube>{getData(home.cubeDropDown.selectedItem)}</cube>
				<catalog>{getData(home.catalogDropDown.selectedItem)}</catalog>
				<schema>{getData(home.schemaDropDown.selectedItem)}</schema>
			</mx:request>
		</mx:HTTPService>
		
		<s:HTTPService id="remove" resultFormat="text" contentType="application/xml" 
					   method="POST" result="getResults()">
		</s:HTTPService>
		
		<s:HTTPService id="removeMeasure" resultFormat="text" contentType="application/xml" 
					   method="POST">
		</s:HTTPService>
		
		<!-- request to server to move a new item to the ROWS (categories) axis for graphing-->
		<s:HTTPService id="toRows" resultFormat="text" contentType="application/xml"
					   method="POST" result="getResults()">
		</s:HTTPService>
		
		<!-- request to server to move a new item to the Columns (Series) axis for graphing-->
		<s:HTTPService id="toColumns" resultFormat="text" contentType="application/xml"
					   method="POST" result="getResults()">
		</s:HTTPService>
		
		<s:HTTPService id="toUnused" resultFormat="text" contentType="application/xml"
					   method="POST" result="getResults()">
		</s:HTTPService>
		
		<!-- request to server to get the new chart information back from the server for graphing values-->
		<s:HTTPService id="results" resultFormat="text"
			method="GET" result="updateGraphData(event)" />
		
		<create_query:Create_Query id="create_Query" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		<s:CallResponder id="CreateQueryResult"/>
		<submit_query:Submit_Query id="submit_Query" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		<s:CallResponder id="Submit_QueryResult"/>
		
	</fx:Declarations>
	<fx:DesignLayer id="background">
<!--		I bet there's a better way to do the background		 -->
		<s:Rect id="bg" 
				width="100%" height="100%" 
				x="0" y="0">
			<s:fill>
				<s:SolidColor color="#CFE8FF"/>
			</s:fill>
			<s:filters>
				<s:GlowFilter alpha="1.0" blurX="6.0" blurY="6.0" color="0x5380d0" inner="true" knockout="false" quality="2" strength="1"/>
			</s:filters>
		</s:Rect>
		<s:BitmapImage id="img"
			source="@Embed('assets/download.jpg')"
			fillMode="repeat"
			left="0" right="0"  top="0" bottom="0"/>
	</fx:DesignLayer>
	<fx:DesignLayer id="panels">
<!--		organized left to right then top to bottom		 -->
		<components:Graph id="graph" 
						  x="180" y="210"
						  />
		<components:GraphLegend id="graphLegend"
						   x="180" y="140">
		</components:GraphLegend>
		
		<components:Measures id="measures"
 			left="20" top="140"
		/>
		<components:StateStep id="stateStep"
			x="20" y="780"
		/>
		
		<components:Series id="series"
			x="180" y="20"
		/>
		<components:Categories id="categories"
			x="180" y="780"
		/>
		
		<components:Picker id="picker"
						   x="1280" y="140"
							>
		</components:Picker>
		<components:Sets id="sets"
						 x="20" y="780"
		/>
		<components:ServerStatus id="serverStatus"
								 x="1280" y="20"
								 />
		<components:Trash id="trash"
						  x="1280" y="780" />	
		<components:Home id="home"
						 x="20" y="20">


		</components:Home>
		
		
	</fx:DesignLayer>
	
	

	
	
</s:WindowedApplication>
