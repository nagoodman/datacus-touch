<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:components="components.*"
					   backgroundColor="#FFFFFF"
					   minWidth="1440"
					   minHeight="920"
					   creationComplete="init()" xmlns:create_query="services.create_query.*" xmlns:submit_query="services.submit_query.*">  
					<!--make it full screen, but for now...-->
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import flash.display.Stage;
			
			import mx.charts.BarChart;
			import mx.charts.CategoryAxis;
			import mx.charts.Legend;
			import mx.charts.series.BarSeries;
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.containers.TitleWindow;
			import mx.controls.*;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.create_query.*;
			
			import spark.components.DropDownList;
			import spark.components.List;
			import spark.components.RichText;
			import spark.layouts.supportClasses.DropLocation;
			
			import tuio.*;
			import tuio.TouchEvent;
			import tuio.TuioClient;
			import tuio.connectors.UDPConnector;
			import tuio.debug.TuioDebug;
			import tuio.gestures.DragGesture;
			import tuio.gestures.GestureManager;
			import tuio.mouse.MouseToTouchDispatcher;
			import tuio.windows7.*;
			
			protected var mainStage:Stage;
			
			/*Function first initiated when software starts*/
			protected function init():void {
				mainStage = this.systemManager.stage;
				var touchSupport:Boolean = Multitouch.supportsTouchEvents;
				var gestureSupport:Boolean = Multitouch.supportsGestureEvents;
				Multitouch.inputMode = MultitouchInputMode.GESTURE;
				picker.addEventListener(MouseEvent.ROLL_OUT, pickerFlick);
				/*
				//makes full screen, but need to make sizinf relative first
				//mainStage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
				tc = new TuioClient(new UDPConnector());
				tm = TuioManager.init(mainStage, tc);
				//gm = GestureManager.init(stage,tc);
				//GestureManager.addGesture(new DragGesture());
				winTouch = new Windows7TouchToTuioDispatcher(mainStage);
				//mTouch = new MouseToTouchDispatcher(mainStage);
				tDbg = TuioDebug.init(mainStage);
				tc.addListener(tDbg);
				//these event listeners need to be added to each object
				mainStage.addEventListener(tuio.TouchEvent.TOUCH_DOWN, handleDown);
				//stage.addEventListener(org.tuio.TouchEvent.TOUCH_MOVE, handleMove);
				mainStage.addEventListener(tuio.TouchEvent.TOUCH_UP, handleUp);	
				//stage.addEventListener(flash.events.TransformGestureEvent.GESTURE_PAN, handleDrag);
*/
				try {
					CreateSession.send();
				} catch (error:IOError) {
					error_window("The Saiku Server is not running. Please close the application, start the Saiku server, and restart the application.");
				}
			}
			
			/*Variables used with touch gesture handling*/
			//public var tc:TuioClient;
			//public var tm:TuioManager;
			//public var gm:GestureManager;
			//private var winTouch:Windows7TouchToTuioDispatcher;
			//private var mTouch:MouseToTouchDispatcher;
			//private var tDbg:TuioDebug;
			
			public function pickerFlick(e:MouseEvent):void {
				Picker_Open();
			}
			
			public function handleDrag(e:TransformGestureEvent):void {
				//trace("dragged");
			}
			
			public function handleDown(e:tuio.TouchEvent):void {
				trace("TOUCHDOWN!");
				trace(e.relatedObject.name);
			}
			
			public function handleUp(e:tuio.TouchEvent):void {
				//trace("TOUCHUP!");
				//trace(e.relatedObject);
			}
			
			public function handleMove(e:tuio.TouchEvent):void {
				//trace("moving");
			} 
			
			protected function checkResponse(event:ResultEvent):void{
				if (event.statusCode == 200){
					Home_Open();
				}
				
			}
			
			
			
			/*Functions to handle state changes*/
			protected function Picker_Open():void
			{
				const state:String = currentState;
				if ( state == 'Page3' ) {
					currentState='Page4';
					populatePicker();
				}
				if (state == 'Page5'){
					currentState='Page4';
					populatePicker();
				}
				if (state =='Page6'){
					currentState="Page4";
					populatePicker();
				}
				
			}
			
			protected function Picker_Close():void{
				const state:String = currentState;
				if ( state == 'Page4' ) {
					currentState='Page3';
				}
			}
			
			protected function Home_Open():void{
				const state:String = currentState;
				if (state == 'Page1' ) {
					currentState='Page2';
					GetSourceOptions.send();
				}
				else{
					currentState='Page2'
				}
			}
			
			public function Trash_Open():void{
				const state:String = currentState;
				if (state =='Page3'){
					currentState="Page5";
				}
				if (state =='Page4'){
					currentState="Page5";
				}
				if (state =='Page6'){
					currentState="Page5";
				}
			}
			
			public function Trash_Close():void{
				const state:String = currentState;
				if ( state =='Page5'){
					currentState='Page3';
				}
			}
			
			public function Sets_Open():void{
				const state:String = currentState;
				if (state =='Page3'){
					currentState="Page6";
				}
				if (state =='Page4'){
					currentState="Page6";
				}
				if (state =='Page5'){
					currentState="Page6";
				}
			}
			
			public function Sets_Close():void{
				const state:String = currentState;
				if ( state =='Page6'){
					currentState='Page3';
				}
			}
			
			public function Home_Close():void{
				const state:String = currentState;
				if ( state == 'Page2' ) {
					currentState='Page3';
				}
			}
			
			public function submit_form():void{
				Home_Close();
				submit_query();
			}
				
			
			/*Variables used to create drop down menus for creating a new query*/
			private var connectionArray:ArrayCollection = new ArrayCollection();
			private var catalogArray:ArrayCollection = new ArrayCollection();
			private var schemaArray:ArrayCollection = new ArrayCollection();
			private var cubeArray:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var queryName:String;
			
			private function fillHomeMenu(event:ResultEvent):void{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				
				for (var i:int =0; i < arr.length; i++){
					var con:Object = new Object;
					con.label = arr[i].connectionName;
					con.data = arr[i].connectionName;
					connectionArray.addItemAt(con, i);
					for (var j:int = 0; j< arr[i].catalogs.length; j++){
						var cat:Object = new Object;
						cat.label = arr[i].catalogs[j].name;
						cat.data = arr[i].catalogs[j].name;
						catalogArray.addItemAt(cat, j);
						for (var k:int = 0; k < arr[i].catalogs[j].schemas.length; k++){
							var schem:Object = new Object;
							schem.label = arr[i].catalogs[j].schemas[k].name;
							schem.data = arr[i].catalogs[j].schemas[k].name;
							schemaArray.addItemAt(schem, k);
							for (var l:int = 0; l < arr[i].catalogs[j].schemas[k].cubes.length; l++){
								var cube:Object = new Object;
								cube.label = arr[i].catalogs[j].schemas[k].cubes[l].cubeName;
								cube.data = arr[i].catalogs[j].schemas[k].cubes[l].cubeName;
								cubeArray.addItemAt(cube, k);
							}
						}
					}	
				}

				connectionDropDown.dataProvider = connectionArray;
				connectionDropDown.selectedIndex=0;
				

				catalogDropDown.dataProvider = catalogArray;
				catalogDropDown.selectedIndex=0;
				

				schemaDropDown.dataProvider = schemaArray;
				schemaDropDown.selectedIndex=0;
				

				cubeDropDown.dataProvider = cubeArray;
				cubeDropDown.selectedIndex=0;
				
			}
			
			public function error_window(error_message:String):void {
				var popup:TitleWindow = new TitleWindow();
				popup.showCloseButton = true;
				popup.addEventListener(Event.CLOSE, closeTitleWindow);
				var label:Label = new Label();
				label.text = error_message;
				popup.addChild(label);
				PopUpManager.addPopUp(popup, this, true);
				PopUpManager.centerPopUp(popup);
			}
			
			private function faultHandler(evt:FaultEvent):void {
				var errors:String = "The Saiku Server is not running. " +
					"Please close the application, start the Saiku server, " +
					"and restart the application."
				
				error_window(errors);
			}
			
			//Creates a query in which the user manipulates through Datacus
			public function submit_query():void
			{
				measures.measuresList.dataProvider = null;
				graph.removeAllElements();
				series.serDB = new ArrayCollection;
				categories.catDB = new ArrayCollection;	
				seriesList = new ArrayCollection;
				categoriesList = new ArrayCollection;
				//categories.catList.dataProvider = new ArrayList;
				//series.serList.dataProvider = new ArrayList;
				
				//CreateQueryResult.token = create_Query.CreateQuery(connectionDropDown.selectedItem.data,cubeDropDown.selectedItem.data,catalogDropDown.selectedItem.data,schemaDropDown.selectedItem.data);
				queryName = QueryName.text;
//				var popup:TitleWindow = new TitleWindow();
//				popup.showCloseButton = true;
//				popup.addEventListener(Event.CLOSE, closeTitleWindow);
//				var label:Label = new Label();
//				label.text = "You must enter a valid name for the query. Query names must not be blank, cannot contain special characters, and cannot contain more than 20 characters.";
//				popup.addChild(label);
				//var pattern1:RegExp = new RegExp("[!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\_\\\\=\\+\\/\\,\\.\\<\\>\\?\\~\\`\\\]");
				var pattern1:RegExp = new RegExp("^[a-zA-Z0-9]+");
				var pattern2:RegExp = new RegExp("[!@#$%^&*()+=,.<>\\]\\[;:'/\]");
				if (queryName == "" || queryName.length > 20 
					|| !(queryName.match(pattern1)) 
					|| queryName.match(pattern2)){
					error_window("You must enter a valid name for the query. " +
						"Query names must not be blank and cannot contain spaces, " +
						"special characters, or more than 20 characters.");
				} else {
					submit.url="http://localhost:8080/saiku/rest/saiku/admin/query/"+queryName+"/";
					var params:Object = {};
					//params['connection'] = connectionDropDown.selectedItem.data;
					//params['cube'] = cubeDropDown.selectedItem.data;
					//params['catalog'] = catalogDropDown.selectedItem.data;
					//params['schema'] = schemaDropDown.selectedItem.data;
					//submit.send(params);//sends service call to get new graph info 
					CreateQueryResult.token = create_Query.CreateQuery(connectionDropDown.selectedItem.data,cubeDropDown.selectedItem.data,catalogDropDown.selectedItem.data,schemaDropDown.selectedItem.data);
					//Submit_QueryResult.token = submit_Query.Submit_Query(QueryName.text,connectionDropDown.selectedItem.data,cubeDropDown.selectedItem.data,catalogDropDown.selectedItem.data,schemaDropDown.selectedItem.data);
				}
			}
			
			//function for closing the popup windows
			public function closeTitleWindow(evt:CloseEvent):void {
				PopUpManager.removePopUp(TitleWindow(evt.target));
			}
			/*Variables used to populate the Picker*/
			[Bindable]
			private var destDB:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			public var dimensionsAC:ArrayCollection;
			
			[Bindable]
			public var levelsAC:ArrayCollection;
			
			[Bindable]
			public var membersAC:ArrayCollection;
			
			[Bindable]
			public var measuresAC:ArrayCollection;
			
			[Bindable]
			public var currentDimension:String;
			
			[Bindable]
			public var currentHierarchy:String;
			
			[Bindable]
			public var currentLevel:int;
			
			[Bindable]
			public var currentMeasure:String;
			
			/*Functions that populate the picker and handle changes within the picker*/
			public function populatePicker():void{
				queryName = new String();
				queryName = "chartdata";
				callDimensions.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/"
				callDimensions.send()
			}
			
			//Populates the dimension list
			public function getDimensions(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				dimensionsAC = new ArrayCollection();
				measuresAC = new ArrayCollection();
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					if(arr[i].caption == 'Measures'){
						obj.label = arr[i].caption;
						obj.value = arr[i].uniqueName;
						measuresAC.addItem(obj);
					}
					else{
						obj.label = arr[i].caption;
						obj.value = arr[i].uniqueName;
						dimensionsAC.addItem(obj);
					}
				}
				picker.DimensionsDLContainer.dimensionsList.dataProvider = dimensionsAC;
				if (arr.length != 0){
					var dimension:String = dimensionsAC[0].label;
					var hierarchy:String = dimensionsAC[0].label;
					callMeasures.send();
					currentDimension = dimension;
					currentHierarchy = hierarchy;
					createLevels(currentDimension, currentHierarchy);
				}
			}
			
			//forms the url string to retrieve the levels of a query
			public function createLevels(dimension:String, hierarchy:String):void{
				currentDimension = dimension;
				currentHierarchy = hierarchy;
				picker.MembersDLContainer.membersLevel1.dataProvider = null;
				picker.MembersDLContainer.membersLevel2.dataProvider = null;
				picker.MembersDLContainer.membersLevel3.dataProvider = null;
				
				callLevels.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+dimension+"/hierarchy/"+hierarchy+"/";
				callLevels.send();
			}
			
			//retrieves the first list in the dimensions array and stores in the Measures panel (consistent across cubes)
			public function getMeasures(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				measuresAC = new ArrayCollection();
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					obj.label = arr[i].caption;
					obj.dimension = arr[i].dimension;
					obj.value = arr[i].uniqueName;
					measuresAC.addItem(obj);	
				}
				measures.measuresList.dataProvider = measuresAC;
				
			}
			
			//populates the levels list within the picker for selection
			public function getLevels(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				levelsAC = new ArrayCollection();
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					obj.label = arr[i].caption;
					obj.dimension = arr[i].hierarchy;
					obj.selectionType = 'LEVEL';
					obj.listLocation = 'LEVEL';
					obj.number = i;
					obj.value = arr[i].uniqueName;
					levelsAC.addItem(obj);	
				}
				picker.LevelsDLContainer.levelsList.dataProvider = levelsAC;
				getMembersFromLevels(levelsAC);
			}
			
			//forms three strings to retrieve the three levels of members initially visible within the picker
			public function getMembersFromLevels(levels:ArrayCollection):void
			{
				var i:int = 0;
				if(levels.length > 3){
					for (i = 0; i < 3; i++){
						if (i==0){
							callMembers1.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+currentDimension+"/hierarchy/"+currentHierarchy+"/"+levels[i].label;
							callMembers1.send();
						}
						if (i==1){
							callMembers2.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+currentDimension+"/hierarchy/"+currentHierarchy+"/"+levels[i].label;
							callMembers2.send();
						}
						if (i==2){
							callMembers3.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+currentDimension+"/hierarchy/"+currentHierarchy+"/"+levels[i].label;
							callMembers3.send();
						}			
					}
				}else{
					for (i = 0; i < levels.length; i ++){
						if (i==0){
							callMembers1.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+currentDimension+"/hierarchy/"+currentHierarchy+"/"+levels[i].label;
							callMembers1.send();
						}
						if (i==1){
							callMembers2.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+currentDimension+"/hierarchy/"+currentHierarchy+"/"+levels[i].label;
							callMembers2.send();
						}
						if (i==2){
							callMembers3.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/axis/UNUSED/dimension/"+currentDimension+"/hierarchy/"+currentHierarchy+"/"+levels[i].label;
							callMembers3.send();
						}				
					}			
				}		
			}
			
			//populates the first members list within the picker
			public function getMembers1(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				membersAC = new ArrayCollection();
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					obj.label = arr[i].caption;
					obj.dimension = arr[i].dimension;
					obj.selectionType = 'MEMBER';
					obj.listLocation = 'MEMBER1';
					obj.number = i;
					obj.value = arr[i].uniqueName;
					membersAC.addItem(obj);	
				}
				picker.MembersDLContainer.membersLevel1.dataProvider = membersAC;
			}
			
			//populates the second members list within the picker
			public function getMembers2(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				membersAC = new ArrayCollection();
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					obj.label = arr[i].caption;
					obj.dimension = arr[i].dimension;
					obj.selectionType = 'MEMBER';
					obj.listLocation = 'MEMBER2';
					obj.number = i;
					obj.value = arr[i].uniqueName;
					membersAC.addItem(obj);	
				}
				picker.MembersDLContainer.membersLevel2.dataProvider = membersAC;
			}
			
			//populates the third members list within the picker
			public function getMembers3(event:ResultEvent):void
			{
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				membersAC = new ArrayCollection();
				for (var i:int =0; i < arr.length; i++){
					var obj:Object = new Object;
					obj.label = arr[i].caption;
					obj.dimension = arr[i].dimension;
					obj.selectionType = 'MEMBER';
					obj.listLocation = 'MEMBER3';
					obj.number = i;
					obj.value = arr[i].uniqueName;
					membersAC.addItem(obj);	
				}
				picker.MembersDLContainer.membersLevel3.dataProvider = membersAC;
			}
			
			public function removeFromList(member:Object, listIdentifier:String):void
			{
				var memberIndex:int = member.number;
				if (listIdentifier == 'ROWS'){
					categoriesList.removeItemAt(memberIndex);
					removeFromGraph(member);
					categories.catList.dataProvider.removeItemAt(memberIndex);
					//find the correct url to remove items from query
					//results.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/result"
					//results.send();
				}
				if (listIdentifier == 'COLUMNS'){
					seriesList.removeItemAt(memberIndex);
					removeFromGraph(member);
					series.serList.dataProvider.removeItemAt(memberIndex);
					//find the correct url to remove items from query
					//results.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/result"
					//results.send();
				}
				if (listIdentifier == 'LEVEL'){
					//should not remove the levels but the members within that level to keep the tree structure in picker
					//picker.LevelsDLContainer.levelsList.dataProvider.removeItemAt(memberIndex);
				}
				if (listIdentifier == 'MEMBER1'){
					picker.MembersDLContainer.membersLevel1.dataProvider.removeItemAt(memberIndex);
				}
				if (listIdentifier == 'MEMBER2'){
					picker.MembersDLContainer.membersLevel2.dataProvider.removeItemAt(memberIndex);
				}
				if (listIdentifier == 'MEMBER3'){
					picker.MembersDLContainer.membersLevel3.dataProvider.removeItemAt(memberIndex);
				}
			}
			
			public function removeFromGraph(members:Object):void
			{
				var originalLocation:String = members.listLocation;
				var hierarchy:String = members.dimension;
				var dimension:String = hierarchy.replace("[","");
				dimension = dimension.replace("]","");
				hierarchy = hierarchy.replace('[','%5B');
				hierarchy = hierarchy.replace(']','%5D');
				var item:String = members.value;
				item = item.replace('[','%5B');
				item = item.replace(']','%5D');
				item = item.replace('[','%5B');
				item = item.replace(']','%5D');
				item = item.replace('[','%5B');
				item = item.replace(']','%5D');
					
				if (members.selectionType == 'LEVEL'){
					remove.url="http://localhost:8080/saiku/rest/saiku/admin/query/"+queryName+"/axis/"+originalLocation+"/dimension/"+dimension+"/hierarchy/"+hierarchy+"/"+item;
				}
				if (members.selectionType == 'MEMBER'){
					remove.url="http://localhost:8080/saiku/rest/saiku/admin/query/"+queryName+"/axis/"+originalLocation+"/dimension/"+dimension+"/member/"+item;
				}
				remove.headers['X-HTTP-Method-Override'] = 'DELETE';
				var params:Object = {};
				params['position'] = members.itemPosition;
				params['memeberposition'] = members.itemMemberPosition;
				remove.send(params);//sends service call to get new graph info 
				
			}
			
			/*The variables used within the series and categories panels*/
			[Bindable]
			public var seriesList:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			public var categoriesList:ArrayCollection = new ArrayCollection;
			
			String.prototype.replace = function(s:String, z:String):String{
				return unescape(escape(this).split(s).join(z));
			}
			
			
			/*The following are functions for posting to different axises on the server and create a resulting graph*/
			//This is a public function that allows when array on series panel is changed to update the query
			public var nextColumnItemPosition:int = new int();
			
			public function moveToColumns(members:Object):void
			{
				//seriesList = new ArrayCollection;
				
				for (var i:int = 0; i < members.length; i ++){
					seriesList.addItem(members[i]);
					members[i].listLocation = 'COLUMNS';
					members[i].itemMemberPosition = seriesList.length -1;
					members[i].itemPosition = nextColumnItemPosition;
					var hierarchy:String = members[i].dimension;
					var dimension:String = hierarchy.replace("[","");
					dimension = dimension.replace("]","");
					hierarchy = hierarchy.replace('[','%5B');
					hierarchy = hierarchy.replace(']','%5D');
					var item:String = members[i].value;
					item = item.replace('[','%5B');
					item = item.replace(']','%5D');
					item = item.replace('[','%5B');
					item = item.replace(']','%5D');
					item = item.replace('[','%5B');
					item = item.replace(']','%5D');
					
					if (members[i].selectionType == 'LEVEL'){
						toColumns.url="http://localhost:8080/saiku/rest/saiku/admin/query/"+queryName+"/axis/COLUMNS/dimension/"+dimension+"/hierarchy/"+hierarchy+"/"+item;
					}
					if (members[i].selectionType == 'MEMBER'){
						toColumns.url="http://localhost:8080/saiku/rest/saiku/admin/query/"+queryName+"/axis/COLUMNS/dimension/"+dimension+"/member/"+item;
					}
					
					var params:Object = {};
					params["position"] = nextColumnItemPosition;
					params["memberposition"] = seriesList.length -1;
					
					toColumns.send(params);//sends service call to get new graph info 
					
					nextColumnItemPosition = nextColumnItemPosition + 1;
				}
			}
			
			[Bindable]
			public var nextRowItemPosition:int = new int();
			//This is a public function that allows when array on categories panel is changed to update the query
			public function moveToRows(members:Object):void
			{
				
				//categoriesList = new ArrayCollection;
				
				for (var i:int = 0; i < members.length; i ++){
					categoriesList.addItem(members[i]);
					members[i].listLocation = 'ROWS';
					members[i].itemMemberPosition = categoriesList.length -1;
					members[i].itemPosition = nextRowItemPosition;
					var hierarchy:String = members[i].dimension;
					var dimension:String = hierarchy.replace("[","");
					dimension = dimension.replace("]","");
					hierarchy = hierarchy.replace('[','%5B');
					hierarchy = hierarchy.replace(']','%5D');
					var item:String = members[i].value;
					item = item.replace('[','%5B');
					item = item.replace(']','%5D');
					item = item.replace('[','%5B');
					item = item.replace(']','%5D');
					item = item.replace('[','%5B');
					item = item.replace(']','%5D');
					
					if (members[i].selectionType == 'LEVEL'){
						toRows.url="http://localhost:8080/saiku/rest/saiku/admin/query/"+queryName+"/axis/ROWS/dimension/"+dimension+"/hierarchy/"+hierarchy+"/"+item;
					}
					if (members[i].selectionType == 'MEMBER'){
						toRows.url="http://localhost:8080/saiku/rest/saiku/admin/query/"+queryName+"/axis/ROWS/dimension/"+dimension+"/member/"+item;
					}
					var params:Object = {};
					params["position"] = nextRowItemPosition;
					params["memberposition"] = categoriesList.length -1;

					toRows.send(params);//sends service call to get new graph info 
					
					nextRowItemPosition = nextRowItemPosition + 1;
				}
			}
			
			//forms url string to retrieve results of a query
			public function getResults():void
			{
				if((seriesList.length > 0) && (categoriesList.length > 0)){
					graph.removeAllElements();
					results.url="http://localhost:8080/saiku/json/saiku/admin/query/"+queryName+"/result"
					results.send();
				}else{
					graph.removeAllElements();
				}
			}
			[bindable]
			private var columnHeaderArray:ArrayCollection;
			[bindable]
			private var rowHeaderArray:ArrayCollection;
			[bindable]
			private var dataCellArray:ArrayCollection;
			
			//parses results array and stores in an ArrayCollection
			public function updateGraphData(event:ResultEvent):void
			{
				columnHeaderArray = new ArrayCollection;
				rowHeaderArray = new ArrayCollection;
				dataCellArray = new ArrayCollection;
				var rawData:String=String(event.result);
				var arr:Array = (JSON.decode(rawData)as Array);
				for (var i:int = 0; i < arr.length; i++){
					for (var j:int = 0; j<arr[i].length; j++){
						if ((arr[i][j].type == "COLUMN_HEADER")&& (arr[i][j].value != 'null')){
							if ((arr[i][j].value != arr[i][j-1].value) && (columnHeaderArray.length < (arr[i].length - 1))){
								columnHeaderArray.addItem(arr[i][j]);
							}
						}
						if ((arr[i][j].type == "ROW_HEADER") && (arr[i][j].value != 'null')){
							rowHeaderArray.addItem(arr[i][j]);
						}
						if ((arr[i][j].type == "DATA_CELL") && (arr[i][j].value != 'null')){
							var tempItem:String = arr[i][j].value;
							var passItem:int = int(tempItem.replace(',',''))
							dataCellArray.addItem(passItem);
						}
					}
				}
				var dataIterator:int = 0;
				var tempObj:Object;
				chartData = new ArrayCollection();
				if (rowHeaderArray.length > columnHeaderArray.length){
					for (var k:int = 0; k<rowHeaderArray.length; k++){
						tempObj = new Object();
						tempObj[rowHeaderArray[k].type] = rowHeaderArray[k].value;
						for (var l:int = 0; l<columnHeaderArray.length; l++){
							tempObj[columnHeaderArray[l].value] = dataCellArray[dataIterator];
							dataIterator++;
						}
						chartData.addItem(tempObj);
					}
				}else{
					for (var n:int = 0; n<columnHeaderArray.length; n++){
						tempObj = new Object();
						tempObj[columnHeaderArray[n].type] = columnHeaderArray[n].value;
						for (var o:int = 0; o<rowHeaderArray.length; o++){
							tempObj[rowHeaderArray[o].value] = dataCellArray[dataIterator];
							dataIterator++;
						}
						chartData.addItem(tempObj);
					}
					
				}
				
				updateGraph();
			}
			
			/*Variables used within functions to create the graph*/
			[Bindable]
			public var chartData:ArrayCollection;/*= new ArrayCollection([
				{Store:'Deluxe Supermarket', Canada:23112, Mexico:61381, USA:61552},
				{Store:'Gourmet Supermarket', Canada:0, Mexico:23759, USA:23688},
				{Store:'Mid-Size Grocery', Canada:34452, Mexico:74891, USA:0},
				{Store:'Small Grocery', Canada:0, Mexico:24597, USA:50684},
				{Store:'Supermarket', Canada:0, Mexico:58384, USA:135096}
			])*/
			
			
			public var myChart:BarChart;
			public var series1:BarSeries;
			public var series2:BarSeries;
			public var series3:BarSeries;
			public var legend1:Legend;
			
			//updates the graph component with an updated graph
			public function updateGraph():void
			{
				/*Create Chart and set basic properties*/
				myChart = new BarChart();
				myChart.showDataTips = true;
				myChart.dataProvider = chartData;
				myChart.height = 500;
				myChart.width = 1070;
				
				/*Define the category axis */
				var vAxis:CategoryAxis = new CategoryAxis();
				if (chartData[0].ROW_HEADER){
					vAxis.categoryField = "ROW_HEADER";
				}else{
					vAxis.categoryField = "COLUMN_HEADER";
				}
				vAxis.dataProvider = chartData;
				myChart.verticalAxis = vAxis;
				
				var tempSeriesCol:BarSeries;
				var tempSeriesRow:BarSeries;
				var mySeries:Array=new Array();
				
				/*Add the series*/
				if (chartData[0].ROW_HEADER){
					for( var j:int=0; j< columnHeaderArray.length; j++){
						tempSeriesCol = new BarSeries();
						tempSeriesCol.dataProvider = chartData;
						tempSeriesCol.xField=columnHeaderArray[j].value;
						tempSeriesCol.yField = "ROW_HEADER";
						tempSeriesCol.displayName=columnHeaderArray[j].value;
						mySeries.push(tempSeriesCol);
					}
				}else{
					for( var k:int=0; k< rowHeaderArray.length; k++){
						tempSeriesRow = new BarSeries();
						tempSeriesRow.dataProvider = chartData;
						tempSeriesRow.xField=rowHeaderArray[k].value;
						tempSeriesRow.yField = "COLUMN_HEADER";
						tempSeriesRow.displayName=rowHeaderArray[k].value;
						mySeries.push(tempSeriesRow);
					}
				}
				
				
				myChart.series = mySeries;
				
				/*Create a legend*/
				legend1 = new Legend();
				legend1.dataProvider = myChart;
				
				graph.removeAllElements();
				graph.addElement(legend1);
				graph.addElement(myChart);
				
			}			
			
			public function getData(dropDown:*):String{
				return dropDown.data;
			}
			
			protected function button_clickHandler(event:MouseEvent):void
			{
				
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="Page1"/>
		<s:State name="Page2"/>
		<s:State name="Page3"/>
		<s:State name="Page4"/>
		<s:State name="Page5"/>
		<s:State name="Page6"/>
	</s:states>
	<fx:Declarations>
		<s:HTTPService
			id="CreateSession"
			resultFormat='xml'
			url='http://localhost:8080/saiku/rest/saiku/session'
			result="checkResponse(event)" 
			fault="faultHandler(event)"
			requestTimeout="-1" />
		<s:HTTPService
			id="GetSourceOptions"
			resultFormat='text'
			url='http://localhost:8080/saiku/json/saiku/admin/datasources'
			result="fillHomeMenu(event)"/>
		<s:HTTPService
			id="callDimensions"
			resultFormat="text"
			result="getDimensions(event)" />
		<s:HTTPService
			id="callMeasures"
			resultFormat="text"
			url="http://localhost:8080/saiku/json/saiku/admin/query/chartdata/axis/UNUSED/dimension/Measures/hierarchy/Measures/MeasuresLevel"
			result="getMeasures(event)" />
		<s:HTTPService
			id="callLevels"
			resultFormat="text"
			result="getLevels(event)" />
		<s:HTTPService
			id="callMembers1"
			resultFormat="text"
			result="getMembers1(event)" />
		<s:HTTPService
			id="callMembers2"
			resultFormat="text"
			result="getMembers2(event)" />
		<s:HTTPService
			id="callMembers3"
			resultFormat="text"
			result="getMembers3(event)" />
		
		<mx:HTTPService id="submit" resultFormat="text" contentType="application/xml" 
					   method="POST" >
			<mx:request xmlns="">
				<connection>{getData(connectionDropDown.selectedItem)}</connection>
				<cube>{getData(cubeDropDown.selectedItem)}</cube>
				<catalog>{getData(catalogDropDown.selectedItem)}</catalog>
				<schema>{getData(schemaDropDown.selectedItem)}</schema>
			</mx:request>
		</mx:HTTPService>
		
		<s:HTTPService id="remove" resultFormat="text" contentType="application/xml" 
					   method="POST" result="getResults()">
		</s:HTTPService>
		
		<!-- request to server to move a new item to the ROWS (categories) axis for graphing-->
		<s:HTTPService id="toRows" resultFormat="text" contentType="application/xml"
					   method="POST" result="getResults()">
		</s:HTTPService>
		
		<!-- request to server to move a new item to the Columns (Series) axis for graphing-->
		<s:HTTPService id="toColumns" resultFormat="text" contentType="application/xml"
					   method="POST" result="getResults()">
		</s:HTTPService>
		
		<!-- request to server to get the new chart information back from the server for graphing values-->
		<s:HTTPService id="results" resultFormat="text"
			method="GET" result="updateGraphData(event)" />
		
		<create_query:Create_Query id="create_Query" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		<s:CallResponder id="CreateQueryResult"/>
		<submit_query:Submit_Query id="submit_Query" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		<s:CallResponder id="Submit_QueryResult"/>
		
	</fx:Declarations>
	<fx:DesignLayer id="background">
<!--		I bet there's a better way to do the background		 -->
		<s:Rect id="bg" 
				width="100%" height="100%" 
				x="0" y="0">
			<s:fill>
				<s:SolidColor color="#CFE8FF"/>
			</s:fill>
			<s:filters>
				<s:GlowFilter alpha="1.0" blurX="6.0" blurY="6.0" color="0x5380d0" inner="true" knockout="false" quality="2" strength="1"/>
			</s:filters>
		</s:Rect>
		<s:BitmapImage id="img"
			source="@Embed('assets/download.jpg')"
			fillMode="repeat"
			left="0" right="0"  top="0" bottom="0"/>
	</fx:DesignLayer>
	<fx:DesignLayer id="panels">
<!--		organized left to right then top to bottom		 -->
		<components:Graph id="graph" 
						  x="180" y="260"
						  />
		<components:Measures id="measures"
 			left="20" top="260"
		/>
		<components:StateStep id="stateStep"
			x="20" y="780"
		/>
		<components:Pager id="pager"
			x="180" y="20"
		/>
		<components:Series id="series"
			x="180" y="140"
		/>
		<components:Categories id="categories"
			x="180" y="780"
		/>
		<components:ServerStatus id="serverStatus"
			x="1280" y="20"
		/>
		<components:Picker id="picker"
						   x="1280" y="260"
						   click="Picker_Open()" 
						   currentState.Page3="State1"
						   currentState.Page4="State3"
						   currentState.Page5="State2"
						   currentState.Page6="State2">
		</components:Picker>
		<components:Sets id="sets"
						 x="1280" y="140"
						 click="Sets_Open()"
						 currentState.Page6="Sets2"
						 currentState.Page3="Sets1"
						 currentState.Page4="Sets1"
						 currentState.Page5="Sets1"
		/>
		<components:Trash id="trash"
						  x="1280" y="780"
						  click="Trash_Open()"
						  currentState.Page5="Trash2"
						  />	
		<components:Home id="home"
						 x="20" y="20"
						 click="Home_Open()"
						 currentState.Page2="Home2"
						 currentState.Page3="Home3"
						 currentState.Page4="Home4">
		</components:Home>
		
		
	</fx:DesignLayer>
	<mx:Form includeIn="Page2" defaultButton="{submitQuery}" id="ConnectionForm" x='555' y='390' >
		<mx:FormItem label='Connection:'>
			<s:DropDownList id="connectionDropDown" width='200'>
				
			</s:DropDownList>
		</mx:FormItem>
		
		<mx:FormItem label='Catalog:'>
			<s:DropDownList id="catalogDropDown" width='200'>
				
			</s:DropDownList>
		</mx:FormItem>
		
		<mx:FormItem label='Schema:'>
			<s:DropDownList id="schemaDropDown" width='200'>
				
			</s:DropDownList>
		</mx:FormItem>
		
		<mx:FormItem label='Cube:'>
			<s:DropDownList id="cubeDropDown" width='200'>
				
			</s:DropDownList>
		</mx:FormItem>
		
		<mx:FormItem label="Query Name" id="QueryNameLabel" required="true">
			<s:TextInput id="QueryName" width='200' />
		</mx:FormItem>
		
		<mx:FormItem>
			<s:Button label="Create Query" id="submitQuery" click="submit_form()" />
		</mx:FormItem>
		
		<mx:FormItem>
			<s:Button label="Cancel" id="cancelNewQuery" click="Home_Close()" />
		</mx:FormItem>
					
		
	</mx:Form>
	<s:Button includeIn="Page4" x='220' y='300' id="closePicker" label="Close X" click="Picker_Close()"></s:Button>
	<s:Button includeIn="Page6" x='850' y='320' id="closeSets" label="Close X" click="Sets_Close()" ></s:Button>
	<s:Button includeIn="Page5" x='850' y='320' id="closeTrash" label="Close X" click="Trash_Close()" ></s:Button>
	
	<s:transitions>
		<s:Transition autoReverse="true" fromState="Page1" toState="Page2">
			<s:Parallel>
				<s:Parallel target="{ConnectionForm}">
					<s:Fade duration="500" startDelay="1600"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		
		<s:Transition autoReverse="true" fromState="Page2" toState="Page3">
			<s:Parallel>
				<s:Parallel target="{ConnectionForm}">
					<s:Fade duration="300" startDelay="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		
		<s:Transition autoReverse="true" fromState="Page3" toState="Page2">
			<s:Parallel>
				<s:Parallel target="{ConnectionForm}">
					<s:Fade duration="500" startDelay="1600"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page3" toState="Page4">
			<s:Parallel>
				<s:Parallel target="{closePicker}">
					<s:Fade duration="500" startDelay="1300"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page3" toState="Page5">
			<s:Parallel>
				<s:Parallel target="{closeTrash}">
					<s:Fade duration="500" startDelay="1400"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page3" toState="Page6">
			<s:Parallel>
				<s:Parallel target="{closeSets}">
					<s:Fade duration="500" startDelay="1400"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		
		<s:Transition autoReverse="true" fromState="Page4" toState="Page2">
			<s:Parallel>
				<s:Parallel target="{ConnectionForm}">
					<s:Fade duration="500" startDelay="2600"/>
				</s:Parallel>
				<s:Parallel target="{closePicker}">
					<s:Fade duration="300" startDelay="0"/>
				</s:Parallel>
			</s:Parallel>			
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page4" toState="Page3">
			<s:Parallel>
				<s:Parallel target="{closePicker}">
					<s:Fade duration="300" startDelay="0"/>
				</s:Parallel>
			</s:Parallel>			
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page4" toState="Page5">
			<s:Parallel>
				<s:Parallel target="{closeTrash}">
					<s:Fade duration="500" startDelay="1400"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page4" toState="Page6">
			<s:Parallel>
				<s:Parallel target="{closeSets}">
					<s:Fade duration="500" startDelay="1400"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		
		<s:Transition autoReverse="true" fromState="Page5" toState="Page2">
			<s:Parallel>
				<s:Parallel target="{ConnectionForm}">
					<s:Fade duration="500" startDelay="1600"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page5" toState="Page3">
			<s:Parallel>
				<s:Parallel target="{closeTrash}">
					<s:Fade duration="300" startDelay="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page5" toState="Page4">
			<s:Parallel>
				<s:Parallel target="{closePicker}">
					<s:Fade duration="500" startDelay="3000"/>
				</s:Parallel>
				<s:Parallel target="{closeTrash}">
					<s:Fade duration="300" startDelay="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page5" toState="Page6">
			<s:Parallel>
				<s:Parallel target="{closeSets}">
					<s:Fade duration="500" startDelay="1400"/>
				</s:Parallel>
				<s:Parallel target="{closeTrash}">
					<s:Fade duration="300" startDelay="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		
		<s:Transition autoReverse="true" fromState="Page6" toState="Page2">
			<s:Parallel>
				<s:Parallel target="{ConnectionForm}">
					<s:Fade duration="500" startDelay="1600"/>
				</s:Parallel>
				<s:Parallel target="{closeSets}">
					<s:Fade duration="500" startDelay="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page6" toState="Page3">
			<s:Parallel>
				<s:Parallel target="{closeSets}">
					<s:Fade duration="500" startDelay="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page6" toState="Page4">
			<s:Parallel>
				<s:Parallel target="{closePicker}">
					<s:Fade duration="500" startDelay="3000"/>
				</s:Parallel>
				<s:Parallel target="{closeSets}">
					<s:Fade duration="500" startDelay="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="Page6" toState="Page5">
			<s:Parallel>
				<s:Parallel target="{closeSets}">
					<s:Fade duration="500" startDelay="0"/>
				</s:Parallel>
				<s:Parallel target="{closeTrash}">
					<s:Fade duration="500" startDelay="1400"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
	</s:transitions>
</s:WindowedApplication>
